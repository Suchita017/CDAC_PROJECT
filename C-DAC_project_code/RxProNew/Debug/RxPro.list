
RxPro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a78  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003c08  08003c08  00004c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c64  08003c64  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c64  08003c64  00004c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c6c  08003c6c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c6c  08003c6c  00004c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c70  08003c70  00004c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003c74  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          00000220  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000027c  2000027c  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000953a  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a49  00000000  00000000  0000e5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c8  00000000  00000000  00010010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ac  00000000  00000000  000108d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ab1  00000000  00000000  00010f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad97  00000000  00000000  00031a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5330  00000000  00000000  0003c7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00101afc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000289c  00000000  00000000  00101b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  001043dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003bf0 	.word	0x08003bf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003bf0 	.word	0x08003bf0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af02      	add	r7, sp, #8
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f023 030f 	bic.w	r3, r3, #15
 8000570:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	f043 030c 	orr.w	r3, r3, #12
 800057e:	b2db      	uxtb	r3, r3
 8000580:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	b2db      	uxtb	r3, r3
 800058a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800058c:	7bbb      	ldrb	r3, [r7, #14]
 800058e:	f043 030c 	orr.w	r3, r3, #12
 8000592:	b2db      	uxtb	r3, r3
 8000594:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	b2db      	uxtb	r3, r3
 800059e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005a0:	f107 0208 	add.w	r2, r7, #8
 80005a4:	2364      	movs	r3, #100	@ 0x64
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2304      	movs	r3, #4
 80005aa:	214e      	movs	r1, #78	@ 0x4e
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <lcd_send_cmd+0x5c>)
 80005ae:	f001 fea1 	bl	80022f4 <HAL_I2C_Master_Transmit>
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000a0 	.word	0x200000a0

080005c0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f023 030f 	bic.w	r3, r3, #15
 80005d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	f043 030d 	orr.w	r3, r3, #13
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	f043 0309 	orr.w	r3, r3, #9
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80005ec:	7bbb      	ldrb	r3, [r7, #14]
 80005ee:	f043 030d 	orr.w	r3, r3, #13
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	f043 0309 	orr.w	r3, r3, #9
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000600:	f107 0208 	add.w	r2, r7, #8
 8000604:	2364      	movs	r3, #100	@ 0x64
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2304      	movs	r3, #4
 800060a:	214e      	movs	r1, #78	@ 0x4e
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <lcd_send_data+0x5c>)
 800060e:	f001 fe71 	bl	80022f4 <HAL_I2C_Master_Transmit>
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000a0 	.word	0x200000a0

08000620 <lcd_clear>:

void lcd_clear (void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff ff9a 	bl	8000560 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	e005      	b.n	800063e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000632:	2020      	movs	r0, #32
 8000634:	f7ff ffc4 	bl	80005c0 <lcd_send_data>
	for (int i=0; i<100; i++)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3301      	adds	r3, #1
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b63      	cmp	r3, #99	@ 0x63
 8000642:	ddf6      	ble.n	8000632 <lcd_clear+0x12>
	}
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <lcd_init>:

void lcd_init (void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000652:	2032      	movs	r0, #50	@ 0x32
 8000654:	f000 fc86 	bl	8000f64 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000658:	2030      	movs	r0, #48	@ 0x30
 800065a:	f7ff ff81 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800065e:	2005      	movs	r0, #5
 8000660:	f000 fc80 	bl	8000f64 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000664:	2030      	movs	r0, #48	@ 0x30
 8000666:	f7ff ff7b 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800066a:	2001      	movs	r0, #1
 800066c:	f000 fc7a 	bl	8000f64 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000670:	2030      	movs	r0, #48	@ 0x30
 8000672:	f7ff ff75 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(10);
 8000676:	200a      	movs	r0, #10
 8000678:	f000 fc74 	bl	8000f64 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800067c:	2020      	movs	r0, #32
 800067e:	f7ff ff6f 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(10);
 8000682:	200a      	movs	r0, #10
 8000684:	f000 fc6e 	bl	8000f64 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000688:	2028      	movs	r0, #40	@ 0x28
 800068a:	f7ff ff69 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(1);
 800068e:	2001      	movs	r0, #1
 8000690:	f000 fc68 	bl	8000f64 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000694:	2008      	movs	r0, #8
 8000696:	f7ff ff63 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f000 fc62 	bl	8000f64 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff ff5d 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(1);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f000 fc5c 	bl	8000f64 <HAL_Delay>
	HAL_Delay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 fc59 	bl	8000f64 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006b2:	2006      	movs	r0, #6
 80006b4:	f7ff ff54 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f000 fc53 	bl	8000f64 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006be:	200c      	movs	r0, #12
 80006c0:	f7ff ff4e 	bl	8000560 <lcd_send_cmd>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80006d0:	e006      	b.n	80006e0 <lcd_send_string+0x18>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff70 	bl	80005c0 <lcd_send_data>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1f4      	bne.n	80006d2 <lcd_send_string+0xa>
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t RxData[5];
char str[20];



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // blue
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000702:	4806      	ldr	r0, [pc, #24]	@ (800071c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000704:	f001 fc98 	bl	8002038 <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800070a:	4a06      	ldr	r2, [pc, #24]	@ (8000724 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800070c:	2100      	movs	r1, #0
 800070e:	4806      	ldr	r0, [pc, #24]	@ (8000728 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000710:	f000 fe6c 	bl	80013ec <HAL_CAN_GetRxMessage>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40020c00 	.word	0x40020c00
 8000720:	20000110 	.word	0x20000110
 8000724:	200000f4 	.word	0x200000f4
 8000728:	20000078 	.word	0x20000078

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000730:	f000 fba6 	bl	8000e80 <HAL_Init>

  /* USER CODE BEGIN Init */
  	  GPIO_Init();
 8000734:	f000 f9be 	bl	8000ab4 <GPIO_Init>
      TIM2_Init();
 8000738:	f000 f9e0 	bl	8000afc <TIM2_Init>
      TIM3_Init();
 800073c:	f000 fa0c 	bl	8000b58 <TIM3_Init>
     TIM2->CR1 |= TIM_CR1_CEN; // Starting Timer 2
 8000740:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f86c 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f000 f956 	bl	8000a04 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000758:	f000 f8d2 	bl	8000900 <MX_CAN1_Init>
  MX_I2C1_Init();
 800075c:	f000 f924 	bl	80009a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000760:	482c      	ldr	r0, [pc, #176]	@ (8000814 <main+0xe8>)
 8000762:	f000 fdff 	bl	8001364 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000766:	2102      	movs	r1, #2
 8000768:	482a      	ldr	r0, [pc, #168]	@ (8000814 <main+0xe8>)
 800076a:	f000 ff61 	bl	8001630 <HAL_CAN_ActivateNotification>
  HAL_Delay(100);
 800076e:	2064      	movs	r0, #100	@ 0x64
 8000770:	f000 fbf8 	bl	8000f64 <HAL_Delay>
  HAL_Delay(100);
 8000774:	2064      	movs	r0, #100	@ 0x64
 8000776:	f000 fbf5 	bl	8000f64 <HAL_Delay>

  lcd_init();
 800077a:	f7ff ff68 	bl	800064e <lcd_init>
  lcd_clear();
 800077e:	f7ff ff4f 	bl	8000620 <lcd_clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_clear();
 8000782:	f7ff ff4d 	bl	8000620 <lcd_clear>
  	  sprintf(str, "Temp:%d",RxData[1]);
 8000786:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <main+0xec>)
 8000788:	785b      	ldrb	r3, [r3, #1]
 800078a:	461a      	mov	r2, r3
 800078c:	4923      	ldr	r1, [pc, #140]	@ (800081c <main+0xf0>)
 800078e:	4824      	ldr	r0, [pc, #144]	@ (8000820 <main+0xf4>)
 8000790:	f002 fd8e 	bl	80032b0 <siprintf>
  	  lcd_send_cmd(0x80|0x00);
 8000794:	2080      	movs	r0, #128	@ 0x80
 8000796:	f7ff fee3 	bl	8000560 <lcd_send_cmd>
  	  lcd_send_string(str);
 800079a:	4821      	ldr	r0, [pc, #132]	@ (8000820 <main+0xf4>)
 800079c:	f7ff ff94 	bl	80006c8 <lcd_send_string>


  	  sprintf(str, "Dist:%d",RxData[2]);
 80007a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <main+0xec>)
 80007a2:	789b      	ldrb	r3, [r3, #2]
 80007a4:	461a      	mov	r2, r3
 80007a6:	491f      	ldr	r1, [pc, #124]	@ (8000824 <main+0xf8>)
 80007a8:	481d      	ldr	r0, [pc, #116]	@ (8000820 <main+0xf4>)
 80007aa:	f002 fd81 	bl	80032b0 <siprintf>
  	  lcd_send_cmd(0x80|0x40);
 80007ae:	20c0      	movs	r0, #192	@ 0xc0
 80007b0:	f7ff fed6 	bl	8000560 <lcd_send_cmd>
  	  lcd_send_string(str);
 80007b4:	481a      	ldr	r0, [pc, #104]	@ (8000820 <main+0xf4>)
 80007b6:	f7ff ff87 	bl	80006c8 <lcd_send_string>
  	    		if(RxData[0] == 1){
 80007ba:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <main+0xec>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d105      	bne.n	80007ce <main+0xa2>
  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); //
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007c8:	4817      	ldr	r0, [pc, #92]	@ (8000828 <main+0xfc>)
 80007ca:	f001 fc35 	bl	8002038 <HAL_GPIO_WritePin>
  		}
  		if(RxData[0] == 0){
 80007ce:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <main+0xec>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d105      	bne.n	80007e2 <main+0xb6>
  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); //
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007dc:	4812      	ldr	r0, [pc, #72]	@ (8000828 <main+0xfc>)
 80007de:	f001 fc2b 	bl	8002038 <HAL_GPIO_WritePin>
  		}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  		if(RxData[2] <= 7)
 80007e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <main+0xec>)
 80007e4:	789b      	ldrb	r3, [r3, #2]
 80007e6:	2b07      	cmp	r3, #7
 80007e8:	d8cb      	bhi.n	8000782 <main+0x56>
  			 {
  				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f0:	480d      	ldr	r0, [pc, #52]	@ (8000828 <main+0xfc>)
 80007f2:	f001 fc21 	bl	8002038 <HAL_GPIO_WritePin>
  			  	HAL_Delay(1000);
 80007f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007fa:	f000 fbb3 	bl	8000f64 <HAL_Delay>
  			  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000804:	4808      	ldr	r0, [pc, #32]	@ (8000828 <main+0xfc>)
 8000806:	f001 fc17 	bl	8002038 <HAL_GPIO_WritePin>
  			  	HAL_Delay(1000);
 800080a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800080e:	f000 fba9 	bl	8000f64 <HAL_Delay>
	  lcd_clear();
 8000812:	e7b6      	b.n	8000782 <main+0x56>
 8000814:	20000078 	.word	0x20000078
 8000818:	20000110 	.word	0x20000110
 800081c:	08003c08 	.word	0x08003c08
 8000820:	20000118 	.word	0x20000118
 8000824:	08003c10 	.word	0x08003c10
 8000828:	40020c00 	.word	0x40020c00

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b094      	sub	sp, #80	@ 0x50
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 0320 	add.w	r3, r7, #32
 8000836:	2230      	movs	r2, #48	@ 0x30
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fd58 	bl	80032f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	4b28      	ldr	r3, [pc, #160]	@ (80008f8 <SystemClock_Config+0xcc>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	4a27      	ldr	r2, [pc, #156]	@ (80008f8 <SystemClock_Config+0xcc>)
 800085a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000860:	4b25      	ldr	r3, [pc, #148]	@ (80008f8 <SystemClock_Config+0xcc>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	4b22      	ldr	r3, [pc, #136]	@ (80008fc <SystemClock_Config+0xd0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a21      	ldr	r2, [pc, #132]	@ (80008fc <SystemClock_Config+0xd0>)
 8000876:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4b1f      	ldr	r3, [pc, #124]	@ (80008fc <SystemClock_Config+0xd0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000888:	2301      	movs	r3, #1
 800088a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000892:	2302      	movs	r3, #2
 8000894:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000896:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800089a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800089c:	2304      	movs	r3, #4
 800089e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008a0:	2348      	movs	r3, #72	@ 0x48
 80008a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008a8:	2307      	movs	r3, #7
 80008aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ac:	f107 0320 	add.w	r3, r7, #32
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 f879 	bl	80029a8 <HAL_RCC_OscConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008bc:	f000 f8f4 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c0:	230f      	movs	r3, #15
 80008c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c4:	2302      	movs	r3, #2
 80008c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2102      	movs	r1, #2
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 fada 	bl	8002e98 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ea:	f000 f8dd 	bl	8000aa8 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3750      	adds	r7, #80	@ 0x50
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40007000 	.word	0x40007000

08000900 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	@ 0x28
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000906:	4b26      	ldr	r3, [pc, #152]	@ (80009a0 <MX_CAN1_Init+0xa0>)
 8000908:	4a26      	ldr	r2, [pc, #152]	@ (80009a4 <MX_CAN1_Init+0xa4>)
 800090a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 800090c:	4b24      	ldr	r3, [pc, #144]	@ (80009a0 <MX_CAN1_Init+0xa0>)
 800090e:	2212      	movs	r2, #18
 8000910:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000912:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <MX_CAN1_Init+0xa0>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000918:	4b21      	ldr	r3, [pc, #132]	@ (80009a0 <MX_CAN1_Init+0xa0>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800091e:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <MX_CAN1_Init+0xa0>)
 8000920:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000924:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000926:	4b1e      	ldr	r3, [pc, #120]	@ (80009a0 <MX_CAN1_Init+0xa0>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800092c:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <MX_CAN1_Init+0xa0>)
 800092e:	2200      	movs	r2, #0
 8000930:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000932:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_CAN1_Init+0xa0>)
 8000934:	2200      	movs	r2, #0
 8000936:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000938:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <MX_CAN1_Init+0xa0>)
 800093a:	2200      	movs	r2, #0
 800093c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800093e:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_CAN1_Init+0xa0>)
 8000940:	2200      	movs	r2, #0
 8000942:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000944:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <MX_CAN1_Init+0xa0>)
 8000946:	2200      	movs	r2, #0
 8000948:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_CAN1_Init+0xa0>)
 800094c:	2200      	movs	r2, #0
 800094e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000950:	4813      	ldr	r0, [pc, #76]	@ (80009a0 <MX_CAN1_Init+0xa0>)
 8000952:	f000 fb2b 	bl	8000fac <HAL_CAN_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800095c:	f000 f8a4 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canFilterConfig;
  canFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  canFilterConfig.SlaveStartFilterBank=14;
 8000964:	230e      	movs	r3, #14
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  canFilterConfig.FilterBank=2;
 8000968:	2302      	movs	r3, #2
 800096a:	617b      	str	r3, [r7, #20]
  canFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000970:	2301      	movs	r3, #1
 8000972:	61fb      	str	r3, [r7, #28]
  canFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
  canFilterConfig.FilterMaskIdLow=0x0000;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterMaskIdHigh=0xFF00;
 800097c:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000980:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterIdLow=0x0000;
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterIdHigh=0x1500;
 8000986:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 800098a:	603b      	str	r3, [r7, #0]
  HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig);
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	4803      	ldr	r0, [pc, #12]	@ (80009a0 <MX_CAN1_Init+0xa0>)
 8000992:	f000 fc07 	bl	80011a4 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	@ 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000078 	.word	0x20000078
 80009a4:	40006400 	.word	0x40006400

080009a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009ae:	4a13      	ldr	r2, [pc, #76]	@ (80009fc <MX_I2C1_Init+0x54>)
 80009b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009b4:	4a12      	ldr	r2, [pc, #72]	@ (8000a00 <MX_I2C1_Init+0x58>)
 80009b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d8:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009e6:	f001 fb41 	bl	800206c <HAL_I2C_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009f0:	f000 f85a 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200000a0 	.word	0x200000a0
 80009fc:	40005400 	.word	0x40005400
 8000a00:	000186a0 	.word	0x000186a0

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <MX_GPIO_Init+0x9c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a1f      	ldr	r2, [pc, #124]	@ (8000aa0 <MX_GPIO_Init+0x9c>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <MX_GPIO_Init+0x9c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <MX_GPIO_Init+0x9c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a18      	ldr	r2, [pc, #96]	@ (8000aa0 <MX_GPIO_Init+0x9c>)
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_GPIO_Init+0x9c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <MX_GPIO_Init+0x9c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a11      	ldr	r2, [pc, #68]	@ (8000aa0 <MX_GPIO_Init+0x9c>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <MX_GPIO_Init+0x9c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 4174 	mov.w	r1, #62464	@ 0xf400
 8000a74:	480b      	ldr	r0, [pc, #44]	@ (8000aa4 <MX_GPIO_Init+0xa0>)
 8000a76:	f001 fadf 	bl	8002038 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD10 PD12 PD13 PD14
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000a7a:	f44f 4374 	mov.w	r3, #62464	@ 0xf400
 8000a7e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	4619      	mov	r1, r3
 8000a92:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <MX_GPIO_Init+0xa0>)
 8000a94:	f001 f934 	bl	8001d00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a98:	bf00      	nop
 8000a9a:	3720      	adds	r7, #32
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020c00 	.word	0x40020c00

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <Error_Handler+0x8>

08000ab4 <GPIO_Init>:

void TIM4_ms_Delay(uint32_t delay);

// Definitions for User-Defined Functions

	void GPIO_Init(){
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	    // Enable the Clock for GPIOA
	    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <GPIO_Init+0x40>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	4a0d      	ldr	r2, [pc, #52]	@ (8000af4 <GPIO_Init+0x40>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6313      	str	r3, [r2, #48]	@ 0x30

	    // Set PA5 and PA6 in alternate function mode
	    GPIOA->MODER |= ( GPIO_MODER_MODER5_1 | GPIO_MODER_MODER6_1 );
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <GPIO_Init+0x44>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8000af8 <GPIO_Init+0x44>)
 8000aca:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8000ace:	6013      	str	r3, [r2, #0]

	    // Configuring PA5 and PA6 as pull down
	    GPIOA->PUPDR |= ( GPIO_PUPDR_PUPDR5_1 | GPIO_PUPDR_PUPDR6_1 );
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <GPIO_Init+0x44>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	4a08      	ldr	r2, [pc, #32]	@ (8000af8 <GPIO_Init+0x44>)
 8000ad6:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8000ada:	60d3      	str	r3, [r2, #12]

	    // Select AF1 for PA5 and AF2 for PA6
	    GPIOA->AFR[0] |= ( GPIO_AFRL_AFRL5_0 | GPIO_AFRL_AFRL6_1 );
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <GPIO_Init+0x44>)
 8000ade:	6a1b      	ldr	r3, [r3, #32]
 8000ae0:	4a05      	ldr	r2, [pc, #20]	@ (8000af8 <GPIO_Init+0x44>)
 8000ae2:	f043 7304 	orr.w	r3, r3, #34603008	@ 0x2100000
 8000ae6:	6213      	str	r3, [r2, #32]
	}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000

08000afc <TIM2_Init>:

	void TIM2_Init(){
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
	    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000b00:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <TIM2_Init+0x58>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	4a13      	ldr	r2, [pc, #76]	@ (8000b54 <TIM2_Init+0x58>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6413      	str	r3, [r2, #64]	@ 0x40
	    TIM2->PSC = 16-1; //Setting the clock frequency to 1MHz.
 8000b0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b10:	220f      	movs	r2, #15
 8000b12:	629a      	str	r2, [r3, #40]	@ 0x28
	    TIM2->ARR = 20000; // Total period of the timer = 20ms
 8000b14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b18:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	    TIM2->CNT = 0;
 8000b1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
	    TIM2->CCMR1 = 0x0060; //PWM mode for the timer
 8000b26:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b2a:	2260      	movs	r2, #96	@ 0x60
 8000b2c:	619a      	str	r2, [r3, #24]
	    TIM2->CCER |= 1; //Enable channel 1 as output
 8000b2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b32:	6a1b      	ldr	r3, [r3, #32]
 8000b34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6213      	str	r3, [r2, #32]
	    TIM2->CCR1 = 5000; // Pulse width for PWM
 8000b3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b46:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <TIM3_Init>:

	void TIM3_Init(){
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000b5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <TIM3_Init+0x48>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba0 <TIM3_Init+0x48>)
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	6413      	str	r3, [r2, #64]	@ 0x40
	    TIM3->PSC = 16-1; //Setting the clock frequency to 1MHz.
 8000b68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <TIM3_Init+0x4c>)
 8000b6a:	220f      	movs	r2, #15
 8000b6c:	629a      	str	r2, [r3, #40]	@ 0x28
	    TIM3->ARR = 20000; // Total period of the timer = 20ms
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <TIM3_Init+0x4c>)
 8000b70:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000b74:	62da      	str	r2, [r3, #44]	@ 0x2c
	    TIM3->CNT = 0;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <TIM3_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	@ 0x24
	    TIM3->CCMR1 = 0x0060; //PWM mode for the timer
 8000b7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <TIM3_Init+0x4c>)
 8000b7e:	2260      	movs	r2, #96	@ 0x60
 8000b80:	619a      	str	r2, [r3, #24]
	    TIM3->CCER |= 1; //Enable channel 1 as output
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <TIM3_Init+0x4c>)
 8000b84:	6a1b      	ldr	r3, [r3, #32]
 8000b86:	4a07      	ldr	r2, [pc, #28]	@ (8000ba4 <TIM3_Init+0x4c>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6213      	str	r3, [r2, #32]
	    TIM3->CCR1 = 5000; // Pulse width for PWM
 8000b8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <TIM3_Init+0x4c>)
 8000b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b94:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40000400 	.word	0x40000400

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf4 <HAL_MspInit+0x4c>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	4a08      	ldr	r2, [pc, #32]	@ (8000bf4 <HAL_MspInit+0x4c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000be6:	2007      	movs	r0, #7
 8000be8:	f001 f848 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	@ 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a1d      	ldr	r2, [pc, #116]	@ (8000c8c <HAL_CAN_MspInit+0x94>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d134      	bne.n	8000c84 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <HAL_CAN_MspInit+0x98>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	4a1b      	ldr	r2, [pc, #108]	@ (8000c90 <HAL_CAN_MspInit+0x98>)
 8000c24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <HAL_CAN_MspInit+0x98>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_CAN_MspInit+0x98>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a14      	ldr	r2, [pc, #80]	@ (8000c90 <HAL_CAN_MspInit+0x98>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <HAL_CAN_MspInit+0x98>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c64:	2309      	movs	r3, #9
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <HAL_CAN_MspInit+0x9c>)
 8000c70:	f001 f846 	bl	8001d00 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2100      	movs	r1, #0
 8000c78:	2014      	movs	r0, #20
 8000c7a:	f001 f80a 	bl	8001c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c7e:	2014      	movs	r0, #20
 8000c80:	f001 f823 	bl	8001cca <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	@ 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40006400 	.word	0x40006400
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020400 	.word	0x40020400

08000c98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	@ 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a19      	ldr	r2, [pc, #100]	@ (8000d1c <HAL_I2C_MspInit+0x84>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d12b      	bne.n	8000d12 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <HAL_I2C_MspInit+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	4a17      	ldr	r2, [pc, #92]	@ (8000d20 <HAL_I2C_MspInit+0x88>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_I2C_MspInit+0x88>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cd6:	23c0      	movs	r3, #192	@ 0xc0
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cda:	2312      	movs	r3, #18
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480c      	ldr	r0, [pc, #48]	@ (8000d24 <HAL_I2C_MspInit+0x8c>)
 8000cf2:	f001 f805 	bl	8001d00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <HAL_I2C_MspInit+0x88>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	4a08      	ldr	r2, [pc, #32]	@ (8000d20 <HAL_I2C_MspInit+0x88>)
 8000d00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <HAL_I2C_MspInit+0x88>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	@ 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40005400 	.word	0x40005400
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020400 	.word	0x40020400

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <NMI_Handler+0x4>

08000d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <MemManage_Handler+0x4>

08000d40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7e:	f000 f8d1 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <CAN1_RX0_IRQHandler+0x10>)
 8000d8e:	f000 fc75 	bl	800167c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000078 	.word	0x20000078

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f002 fa98 	bl	8003300 <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20020000 	.word	0x20020000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	2000012c 	.word	0x2000012c
 8000e04:	20000280 	.word	0x20000280

08000e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <SystemInit+0x20>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <SystemInit+0x20>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e30:	f7ff ffea 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	@ (8000e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	@ (8000e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f002 fa57 	bl	800330c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fc65 	bl	800072c <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e70:	08003c74 	.word	0x08003c74
  ldr r2, =_sbss
 8000e74:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e78:	2000027c 	.word	0x2000027c

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	@ (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 fee7 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fe78 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 feff 	bl	8001ce6 <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f00:	f000 fec7 	bl	8001c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	@ (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000130 	.word	0x20000130

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	@ (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000130 	.word	0x20000130

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008

08000fac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e0ed      	b.n	800119a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d102      	bne.n	8000fd0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fe14 	bl	8000bf8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 0201 	orr.w	r2, r2, #1
 8000fde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fe0:	f7ff ffb4 	bl	8000f4c <HAL_GetTick>
 8000fe4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fe6:	e012      	b.n	800100e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fe8:	f7ff ffb0 	bl	8000f4c <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b0a      	cmp	r3, #10
 8000ff4:	d90b      	bls.n	800100e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2205      	movs	r2, #5
 8001006:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e0c5      	b.n	800119a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0e5      	beq.n	8000fe8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0202 	bic.w	r2, r2, #2
 800102a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800102c:	f7ff ff8e 	bl	8000f4c <HAL_GetTick>
 8001030:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001032:	e012      	b.n	800105a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001034:	f7ff ff8a 	bl	8000f4c <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b0a      	cmp	r3, #10
 8001040:	d90b      	bls.n	800105a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001046:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2205      	movs	r2, #5
 8001052:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e09f      	b.n	800119a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1e5      	bne.n	8001034 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7e1b      	ldrb	r3, [r3, #24]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d108      	bne.n	8001082 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	e007      	b.n	8001092 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001090:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7e5b      	ldrb	r3, [r3, #25]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d108      	bne.n	80010ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e007      	b.n	80010bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7e9b      	ldrb	r3, [r3, #26]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d108      	bne.n	80010d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0220 	orr.w	r2, r2, #32
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e007      	b.n	80010e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0220 	bic.w	r2, r2, #32
 80010e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7edb      	ldrb	r3, [r3, #27]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d108      	bne.n	8001100 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0210 	bic.w	r2, r2, #16
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e007      	b.n	8001110 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0210 	orr.w	r2, r2, #16
 800110e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7f1b      	ldrb	r3, [r3, #28]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d108      	bne.n	800112a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0208 	orr.w	r2, r2, #8
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	e007      	b.n	800113a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0208 	bic.w	r2, r2, #8
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7f5b      	ldrb	r3, [r3, #29]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d108      	bne.n	8001154 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0204 	orr.w	r2, r2, #4
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e007      	b.n	8001164 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0204 	bic.w	r2, r2, #4
 8001162:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	431a      	orrs	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	ea42 0103 	orr.w	r1, r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	1e5a      	subs	r2, r3, #1
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	430a      	orrs	r2, r1
 8001188:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011bc:	7cfb      	ldrb	r3, [r7, #19]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d003      	beq.n	80011ca <HAL_CAN_ConfigFilter+0x26>
 80011c2:	7cfb      	ldrb	r3, [r7, #19]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	f040 80be 	bne.w	8001346 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80011ca:	4b65      	ldr	r3, [pc, #404]	@ (8001360 <HAL_CAN_ConfigFilter+0x1bc>)
 80011cc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80011d4:	f043 0201 	orr.w	r2, r3, #1
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80011e4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	431a      	orrs	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f003 031f 	and.w	r3, r3, #31
 800120a:	2201      	movs	r2, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	43db      	mvns	r3, r3
 800121c:	401a      	ands	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d123      	bne.n	8001274 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800124e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	3248      	adds	r2, #72	@ 0x48
 8001254:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001268:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800126a:	6979      	ldr	r1, [r7, #20]
 800126c:	3348      	adds	r3, #72	@ 0x48
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d122      	bne.n	80012c2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	431a      	orrs	r2, r3
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800129c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3248      	adds	r2, #72	@ 0x48
 80012a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012b8:	6979      	ldr	r1, [r7, #20]
 80012ba:	3348      	adds	r3, #72	@ 0x48
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	440b      	add	r3, r1
 80012c0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d109      	bne.n	80012de <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	401a      	ands	r2, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80012dc:	e007      	b.n	80012ee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	431a      	orrs	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d109      	bne.n	800130a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43db      	mvns	r3, r3
 8001300:	401a      	ands	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001308:	e007      	b.n	800131a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	431a      	orrs	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d107      	bne.n	8001332 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	431a      	orrs	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001338:	f023 0201 	bic.w	r2, r3, #1
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e006      	b.n	8001354 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
  }
}
 8001354:	4618      	mov	r0, r3
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40006400 	.word	0x40006400

08001364 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b01      	cmp	r3, #1
 8001376:	d12e      	bne.n	80013d6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2202      	movs	r2, #2
 800137c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0201 	bic.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001390:	f7ff fddc 	bl	8000f4c <HAL_GetTick>
 8001394:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001396:	e012      	b.n	80013be <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001398:	f7ff fdd8 	bl	8000f4c <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b0a      	cmp	r3, #10
 80013a4:	d90b      	bls.n	80013be <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2205      	movs	r2, #5
 80013b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e012      	b.n	80013e4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1e5      	bne.n	8001398 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e006      	b.n	80013e4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013da:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
  }
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001400:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001402:	7dfb      	ldrb	r3, [r7, #23]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d003      	beq.n	8001410 <HAL_CAN_GetRxMessage+0x24>
 8001408:	7dfb      	ldrb	r3, [r7, #23]
 800140a:	2b02      	cmp	r3, #2
 800140c:	f040 8103 	bne.w	8001616 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10e      	bne.n	8001434 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d116      	bne.n	8001452 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001428:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0f7      	b.n	8001624 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d107      	bne.n	8001452 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001446:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e0e8      	b.n	8001624 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	331b      	adds	r3, #27
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	4413      	add	r3, r2
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0204 	and.w	r2, r3, #4
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10c      	bne.n	800148a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	331b      	adds	r3, #27
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	4413      	add	r3, r2
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	0d5b      	lsrs	r3, r3, #21
 8001480:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e00b      	b.n	80014a2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	331b      	adds	r3, #27
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4413      	add	r3, r2
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	331b      	adds	r3, #27
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4413      	add	r3, r2
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0202 	and.w	r2, r3, #2
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	331b      	adds	r3, #27
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	4413      	add	r3, r2
 80014c4:	3304      	adds	r3, #4
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2208      	movs	r2, #8
 80014d4:	611a      	str	r2, [r3, #16]
 80014d6:	e00b      	b.n	80014f0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	331b      	adds	r3, #27
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	4413      	add	r3, r2
 80014e4:	3304      	adds	r3, #4
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 020f 	and.w	r2, r3, #15
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	331b      	adds	r3, #27
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	4413      	add	r3, r2
 80014fc:	3304      	adds	r3, #4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	b2da      	uxtb	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	331b      	adds	r3, #27
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	4413      	add	r3, r2
 8001514:	3304      	adds	r3, #4
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0c1b      	lsrs	r3, r3, #16
 800151a:	b29a      	uxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	4413      	add	r3, r2
 800152a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	4413      	add	r3, r2
 8001540:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	0a1a      	lsrs	r2, r3, #8
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	4413      	add	r3, r2
 800155a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	0c1a      	lsrs	r2, r3, #16
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	3302      	adds	r3, #2
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	4413      	add	r3, r2
 8001574:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0e1a      	lsrs	r2, r3, #24
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	3303      	adds	r3, #3
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	4413      	add	r3, r2
 800158e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	3304      	adds	r3, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0a1a      	lsrs	r2, r3, #8
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	3305      	adds	r3, #5
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	4413      	add	r3, r2
 80015c0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	0c1a      	lsrs	r2, r3, #16
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	3306      	adds	r3, #6
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	4413      	add	r3, r2
 80015da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0e1a      	lsrs	r2, r3, #24
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	3307      	adds	r3, #7
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d108      	bne.n	8001602 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0220 	orr.w	r2, r2, #32
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	e007      	b.n	8001612 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 0220 	orr.w	r2, r2, #32
 8001610:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e006      	b.n	8001624 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
  }
}
 8001624:	4618      	mov	r0, r3
 8001626:	371c      	adds	r7, #28
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001640:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d002      	beq.n	800164e <HAL_CAN_ActivateNotification+0x1e>
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d109      	bne.n	8001662 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6959      	ldr	r1, [r3, #20]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e006      	b.n	8001670 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001666:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
  }
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	@ 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001684:	2300      	movs	r3, #0
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d07c      	beq.n	80017bc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d023      	beq.n	8001714 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2201      	movs	r2, #1
 80016d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f983 	bl	80019ea <HAL_CAN_TxMailbox0CompleteCallback>
 80016e4:	e016      	b.n	8001714 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016f8:	e00c      	b.n	8001714 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d004      	beq.n	800170e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001706:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
 800170c:	e002      	b.n	8001714 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f989 	bl	8001a26 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d024      	beq.n	8001768 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001726:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f963 	bl	80019fe <HAL_CAN_TxMailbox1CompleteCallback>
 8001738:	e016      	b.n	8001768 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
 800174c:	e00c      	b.n	8001768 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001754:	2b00      	cmp	r3, #0
 8001756:	d004      	beq.n	8001762 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001760:	e002      	b.n	8001768 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f969 	bl	8001a3a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d024      	beq.n	80017bc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800177a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f943 	bl	8001a12 <HAL_CAN_TxMailbox2CompleteCallback>
 800178c:	e016      	b.n	80017bc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d004      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a0:	e00c      	b.n	80017bc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b4:	e002      	b.n	80017bc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f949 	bl	8001a4e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00c      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d007      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2210      	movs	r2, #16
 80017de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00b      	beq.n	8001802 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2208      	movs	r2, #8
 80017fa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f930 	bl	8001a62 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d009      	beq.n	8001820 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7fe ff6a 	bl	80006f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00c      	beq.n	8001844 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	2b00      	cmp	r3, #0
 8001832:	d007      	beq.n	8001844 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001836:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2210      	movs	r2, #16
 8001842:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00b      	beq.n	8001866 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2208      	movs	r2, #8
 800185e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f912 	bl	8001a8a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	2b00      	cmp	r3, #0
 800186e:	d009      	beq.n	8001884 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f8f9 	bl	8001a76 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00b      	beq.n	80018a6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2210      	movs	r2, #16
 800189e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f8fc 	bl	8001a9e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00b      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d006      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2208      	movs	r2, #8
 80018c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f8f5 	bl	8001ab2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d07b      	beq.n	80019ca <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d072      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d008      	beq.n	8001914 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	f043 0302 	orr.w	r3, r3, #2
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800191a:	2b00      	cmp	r3, #0
 800191c:	d008      	beq.n	8001930 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001936:	2b00      	cmp	r3, #0
 8001938:	d043      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001940:	2b00      	cmp	r3, #0
 8001942:	d03e      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800194a:	2b60      	cmp	r3, #96	@ 0x60
 800194c:	d02b      	beq.n	80019a6 <HAL_CAN_IRQHandler+0x32a>
 800194e:	2b60      	cmp	r3, #96	@ 0x60
 8001950:	d82e      	bhi.n	80019b0 <HAL_CAN_IRQHandler+0x334>
 8001952:	2b50      	cmp	r3, #80	@ 0x50
 8001954:	d022      	beq.n	800199c <HAL_CAN_IRQHandler+0x320>
 8001956:	2b50      	cmp	r3, #80	@ 0x50
 8001958:	d82a      	bhi.n	80019b0 <HAL_CAN_IRQHandler+0x334>
 800195a:	2b40      	cmp	r3, #64	@ 0x40
 800195c:	d019      	beq.n	8001992 <HAL_CAN_IRQHandler+0x316>
 800195e:	2b40      	cmp	r3, #64	@ 0x40
 8001960:	d826      	bhi.n	80019b0 <HAL_CAN_IRQHandler+0x334>
 8001962:	2b30      	cmp	r3, #48	@ 0x30
 8001964:	d010      	beq.n	8001988 <HAL_CAN_IRQHandler+0x30c>
 8001966:	2b30      	cmp	r3, #48	@ 0x30
 8001968:	d822      	bhi.n	80019b0 <HAL_CAN_IRQHandler+0x334>
 800196a:	2b10      	cmp	r3, #16
 800196c:	d002      	beq.n	8001974 <HAL_CAN_IRQHandler+0x2f8>
 800196e:	2b20      	cmp	r3, #32
 8001970:	d005      	beq.n	800197e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001972:	e01d      	b.n	80019b0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001976:	f043 0308 	orr.w	r3, r3, #8
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800197c:	e019      	b.n	80019b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800197e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001980:	f043 0310 	orr.w	r3, r3, #16
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001986:	e014      	b.n	80019b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	f043 0320 	orr.w	r3, r3, #32
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001990:	e00f      	b.n	80019b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800199a:	e00a      	b.n	80019b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019a4:	e005      	b.n	80019b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019ae:	e000      	b.n	80019b2 <HAL_CAN_IRQHandler+0x336>
            break;
 80019b0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699a      	ldr	r2, [r3, #24]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80019c0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2204      	movs	r2, #4
 80019c8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f872 	bl	8001ac6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019e2:	bf00      	nop
 80019e4:	3728      	adds	r7, #40	@ 0x28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aec:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af8:	4013      	ands	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0e:	4a04      	ldr	r2, [pc, #16]	@ (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	60d3      	str	r3, [r2, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b28:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <__NVIC_GetPriorityGrouping+0x18>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f003 0307 	and.w	r3, r3, #7
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	db0b      	blt.n	8001b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	f003 021f 	and.w	r2, r3, #31
 8001b58:	4907      	ldr	r1, [pc, #28]	@ (8001b78 <__NVIC_EnableIRQ+0x38>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	095b      	lsrs	r3, r3, #5
 8001b60:	2001      	movs	r0, #1
 8001b62:	fa00 f202 	lsl.w	r2, r0, r2
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000e100 	.word	0xe000e100

08001b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db0a      	blt.n	8001ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	490c      	ldr	r1, [pc, #48]	@ (8001bc8 <__NVIC_SetPriority+0x4c>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba4:	e00a      	b.n	8001bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4908      	ldr	r1, [pc, #32]	@ (8001bcc <__NVIC_SetPriority+0x50>)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	761a      	strb	r2, [r3, #24]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	@ 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f1c3 0307 	rsb	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf28      	it	cs
 8001bee:	2304      	movcs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d902      	bls.n	8001c00 <NVIC_EncodePriority+0x30>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <NVIC_EncodePriority+0x32>
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	4313      	orrs	r3, r2
         );
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	@ 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c48:	d301      	bcc.n	8001c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00f      	b.n	8001c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <SysTick_Config+0x40>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c56:	210f      	movs	r1, #15
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c5c:	f7ff ff8e 	bl	8001b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <SysTick_Config+0x40>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c66:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <SysTick_Config+0x40>)
 8001c68:	2207      	movs	r2, #7
 8001c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	e000e010 	.word	0xe000e010

08001c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff29 	bl	8001adc <__NVIC_SetPriorityGrouping>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca4:	f7ff ff3e 	bl	8001b24 <__NVIC_GetPriorityGrouping>
 8001ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	6978      	ldr	r0, [r7, #20]
 8001cb0:	f7ff ff8e 	bl	8001bd0 <NVIC_EncodePriority>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff5d 	bl	8001b7c <__NVIC_SetPriority>
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff31 	bl	8001b40 <__NVIC_EnableIRQ>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ffa2 	bl	8001c38 <SysTick_Config>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	@ 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	e16b      	b.n	8001ff4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	f040 815a 	bne.w	8001fee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d005      	beq.n	8001d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d130      	bne.n	8001db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d88:	2201      	movs	r2, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 0201 	and.w	r2, r3, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d017      	beq.n	8001df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d123      	bne.n	8001e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	08da      	lsrs	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3208      	adds	r2, #8
 8001e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	220f      	movs	r2, #15
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	69b9      	ldr	r1, [r7, #24]
 8001e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	2203      	movs	r2, #3
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0203 	and.w	r2, r3, #3
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80b4 	beq.w	8001fee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b60      	ldr	r3, [pc, #384]	@ (800200c <HAL_GPIO_Init+0x30c>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	4a5f      	ldr	r2, [pc, #380]	@ (800200c <HAL_GPIO_Init+0x30c>)
 8001e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e96:	4b5d      	ldr	r3, [pc, #372]	@ (800200c <HAL_GPIO_Init+0x30c>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ea2:	4a5b      	ldr	r2, [pc, #364]	@ (8002010 <HAL_GPIO_Init+0x310>)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a52      	ldr	r2, [pc, #328]	@ (8002014 <HAL_GPIO_Init+0x314>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d02b      	beq.n	8001f26 <HAL_GPIO_Init+0x226>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a51      	ldr	r2, [pc, #324]	@ (8002018 <HAL_GPIO_Init+0x318>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d025      	beq.n	8001f22 <HAL_GPIO_Init+0x222>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a50      	ldr	r2, [pc, #320]	@ (800201c <HAL_GPIO_Init+0x31c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d01f      	beq.n	8001f1e <HAL_GPIO_Init+0x21e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4f      	ldr	r2, [pc, #316]	@ (8002020 <HAL_GPIO_Init+0x320>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d019      	beq.n	8001f1a <HAL_GPIO_Init+0x21a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4e      	ldr	r2, [pc, #312]	@ (8002024 <HAL_GPIO_Init+0x324>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_GPIO_Init+0x216>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4d      	ldr	r2, [pc, #308]	@ (8002028 <HAL_GPIO_Init+0x328>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00d      	beq.n	8001f12 <HAL_GPIO_Init+0x212>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800202c <HAL_GPIO_Init+0x32c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d007      	beq.n	8001f0e <HAL_GPIO_Init+0x20e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4b      	ldr	r2, [pc, #300]	@ (8002030 <HAL_GPIO_Init+0x330>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_GPIO_Init+0x20a>
 8001f06:	2307      	movs	r3, #7
 8001f08:	e00e      	b.n	8001f28 <HAL_GPIO_Init+0x228>
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	e00c      	b.n	8001f28 <HAL_GPIO_Init+0x228>
 8001f0e:	2306      	movs	r3, #6
 8001f10:	e00a      	b.n	8001f28 <HAL_GPIO_Init+0x228>
 8001f12:	2305      	movs	r3, #5
 8001f14:	e008      	b.n	8001f28 <HAL_GPIO_Init+0x228>
 8001f16:	2304      	movs	r3, #4
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x228>
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e004      	b.n	8001f28 <HAL_GPIO_Init+0x228>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_Init+0x228>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_GPIO_Init+0x228>
 8001f26:	2300      	movs	r3, #0
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	f002 0203 	and.w	r2, r2, #3
 8001f2e:	0092      	lsls	r2, r2, #2
 8001f30:	4093      	lsls	r3, r2
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f38:	4935      	ldr	r1, [pc, #212]	@ (8002010 <HAL_GPIO_Init+0x310>)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f46:	4b3b      	ldr	r3, [pc, #236]	@ (8002034 <HAL_GPIO_Init+0x334>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6a:	4a32      	ldr	r2, [pc, #200]	@ (8002034 <HAL_GPIO_Init+0x334>)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f70:	4b30      	ldr	r3, [pc, #192]	@ (8002034 <HAL_GPIO_Init+0x334>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f94:	4a27      	ldr	r2, [pc, #156]	@ (8002034 <HAL_GPIO_Init+0x334>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f9a:	4b26      	ldr	r3, [pc, #152]	@ (8002034 <HAL_GPIO_Init+0x334>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8002034 <HAL_GPIO_Init+0x334>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <HAL_GPIO_Init+0x334>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe8:	4a12      	ldr	r2, [pc, #72]	@ (8002034 <HAL_GPIO_Init+0x334>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	2b0f      	cmp	r3, #15
 8001ff8:	f67f ae90 	bls.w	8001d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3724      	adds	r7, #36	@ 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	40013800 	.word	0x40013800
 8002014:	40020000 	.word	0x40020000
 8002018:	40020400 	.word	0x40020400
 800201c:	40020800 	.word	0x40020800
 8002020:	40020c00 	.word	0x40020c00
 8002024:	40021000 	.word	0x40021000
 8002028:	40021400 	.word	0x40021400
 800202c:	40021800 	.word	0x40021800
 8002030:	40021c00 	.word	0x40021c00
 8002034:	40013c00 	.word	0x40013c00

08002038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002048:	787b      	ldrb	r3, [r7, #1]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002054:	e003      	b.n	800205e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	041a      	lsls	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	619a      	str	r2, [r3, #24]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e12b      	b.n	80022d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe fe00 	bl	8000c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2224      	movs	r2, #36	@ 0x24
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020d0:	f001 f8da 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 80020d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4a81      	ldr	r2, [pc, #516]	@ (80022e0 <HAL_I2C_Init+0x274>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d807      	bhi.n	80020f0 <HAL_I2C_Init+0x84>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4a80      	ldr	r2, [pc, #512]	@ (80022e4 <HAL_I2C_Init+0x278>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	bf94      	ite	ls
 80020e8:	2301      	movls	r3, #1
 80020ea:	2300      	movhi	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	e006      	b.n	80020fe <HAL_I2C_Init+0x92>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4a7d      	ldr	r2, [pc, #500]	@ (80022e8 <HAL_I2C_Init+0x27c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	bf94      	ite	ls
 80020f8:	2301      	movls	r3, #1
 80020fa:	2300      	movhi	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e0e7      	b.n	80022d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4a78      	ldr	r2, [pc, #480]	@ (80022ec <HAL_I2C_Init+0x280>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	0c9b      	lsrs	r3, r3, #18
 8002110:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a6a      	ldr	r2, [pc, #424]	@ (80022e0 <HAL_I2C_Init+0x274>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d802      	bhi.n	8002140 <HAL_I2C_Init+0xd4>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	3301      	adds	r3, #1
 800213e:	e009      	b.n	8002154 <HAL_I2C_Init+0xe8>
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	4a69      	ldr	r2, [pc, #420]	@ (80022f0 <HAL_I2C_Init+0x284>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	099b      	lsrs	r3, r3, #6
 8002152:	3301      	adds	r3, #1
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	430b      	orrs	r3, r1
 800215a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002166:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	495c      	ldr	r1, [pc, #368]	@ (80022e0 <HAL_I2C_Init+0x274>)
 8002170:	428b      	cmp	r3, r1
 8002172:	d819      	bhi.n	80021a8 <HAL_I2C_Init+0x13c>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1e59      	subs	r1, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002182:	1c59      	adds	r1, r3, #1
 8002184:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002188:	400b      	ands	r3, r1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_I2C_Init+0x138>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1e59      	subs	r1, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fbb1 f3f3 	udiv	r3, r1, r3
 800219c:	3301      	adds	r3, #1
 800219e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a2:	e051      	b.n	8002248 <HAL_I2C_Init+0x1dc>
 80021a4:	2304      	movs	r3, #4
 80021a6:	e04f      	b.n	8002248 <HAL_I2C_Init+0x1dc>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d111      	bne.n	80021d4 <HAL_I2C_Init+0x168>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e58      	subs	r0, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	440b      	add	r3, r1
 80021be:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c2:	3301      	adds	r3, #1
 80021c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	e012      	b.n	80021fa <HAL_I2C_Init+0x18e>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1e58      	subs	r0, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	0099      	lsls	r1, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ea:	3301      	adds	r3, #1
 80021ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf0c      	ite	eq
 80021f4:	2301      	moveq	r3, #1
 80021f6:	2300      	movne	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_I2C_Init+0x196>
 80021fe:	2301      	movs	r3, #1
 8002200:	e022      	b.n	8002248 <HAL_I2C_Init+0x1dc>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10e      	bne.n	8002228 <HAL_I2C_Init+0x1bc>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1e58      	subs	r0, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6859      	ldr	r1, [r3, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	440b      	add	r3, r1
 8002218:	fbb0 f3f3 	udiv	r3, r0, r3
 800221c:	3301      	adds	r3, #1
 800221e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002226:	e00f      	b.n	8002248 <HAL_I2C_Init+0x1dc>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1e58      	subs	r0, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6859      	ldr	r1, [r3, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	0099      	lsls	r1, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	fbb0 f3f3 	udiv	r3, r0, r3
 800223e:	3301      	adds	r3, #1
 8002240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002244:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	6809      	ldr	r1, [r1, #0]
 800224c:	4313      	orrs	r3, r2
 800224e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69da      	ldr	r2, [r3, #28]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002276:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6911      	ldr	r1, [r2, #16]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68d2      	ldr	r2, [r2, #12]
 8002282:	4311      	orrs	r1, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	430b      	orrs	r3, r1
 800228a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	000186a0 	.word	0x000186a0
 80022e4:	001e847f 	.word	0x001e847f
 80022e8:	003d08ff 	.word	0x003d08ff
 80022ec:	431bde83 	.word	0x431bde83
 80022f0:	10624dd3 	.word	0x10624dd3

080022f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	461a      	mov	r2, r3
 8002300:	460b      	mov	r3, r1
 8002302:	817b      	strh	r3, [r7, #10]
 8002304:	4613      	mov	r3, r2
 8002306:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002308:	f7fe fe20 	bl	8000f4c <HAL_GetTick>
 800230c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b20      	cmp	r3, #32
 8002318:	f040 80e0 	bne.w	80024dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2319      	movs	r3, #25
 8002322:	2201      	movs	r2, #1
 8002324:	4970      	ldr	r1, [pc, #448]	@ (80024e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f964 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002332:	2302      	movs	r3, #2
 8002334:	e0d3      	b.n	80024de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_I2C_Master_Transmit+0x50>
 8002340:	2302      	movs	r3, #2
 8002342:	e0cc      	b.n	80024de <HAL_I2C_Master_Transmit+0x1ea>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d007      	beq.n	800236a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0201 	orr.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002378:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2221      	movs	r2, #33	@ 0x21
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2210      	movs	r2, #16
 8002386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	893a      	ldrh	r2, [r7, #8]
 800239a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4a50      	ldr	r2, [pc, #320]	@ (80024ec <HAL_I2C_Master_Transmit+0x1f8>)
 80023aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023ac:	8979      	ldrh	r1, [r7, #10]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	6a3a      	ldr	r2, [r7, #32]
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f89c 	bl	80024f0 <I2C_MasterRequestWrite>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e08d      	b.n	80024de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023d8:	e066      	b.n	80024a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	6a39      	ldr	r1, [r7, #32]
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 fa22 	bl	8002828 <I2C_WaitOnTXEFlagUntilTimeout>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00d      	beq.n	8002406 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d107      	bne.n	8002402 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002400:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e06b      	b.n	80024de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b04      	cmp	r3, #4
 8002442:	d11b      	bne.n	800247c <HAL_I2C_Master_Transmit+0x188>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002448:	2b00      	cmp	r3, #0
 800244a:	d017      	beq.n	800247c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002466:	b29b      	uxth	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	6a39      	ldr	r1, [r7, #32]
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 fa19 	bl	80028b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00d      	beq.n	80024a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002490:	2b04      	cmp	r3, #4
 8002492:	d107      	bne.n	80024a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e01a      	b.n	80024de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d194      	bne.n	80023da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e000      	b.n	80024de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024dc:	2302      	movs	r3, #2
  }
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	00100002 	.word	0x00100002
 80024ec:	ffff0000 	.word	0xffff0000

080024f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	460b      	mov	r3, r1
 80024fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002504:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b08      	cmp	r3, #8
 800250a:	d006      	beq.n	800251a <I2C_MasterRequestWrite+0x2a>
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d003      	beq.n	800251a <I2C_MasterRequestWrite+0x2a>
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002518:	d108      	bne.n	800252c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e00b      	b.n	8002544 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002530:	2b12      	cmp	r3, #18
 8002532:	d107      	bne.n	8002544 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002542:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f84f 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00d      	beq.n	8002578 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800256a:	d103      	bne.n	8002574 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002572:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e035      	b.n	80025e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002580:	d108      	bne.n	8002594 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002582:	897b      	ldrh	r3, [r7, #10]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002590:	611a      	str	r2, [r3, #16]
 8002592:	e01b      	b.n	80025cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002594:	897b      	ldrh	r3, [r7, #10]
 8002596:	11db      	asrs	r3, r3, #7
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f003 0306 	and.w	r3, r3, #6
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f063 030f 	orn	r3, r3, #15
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	490e      	ldr	r1, [pc, #56]	@ (80025ec <I2C_MasterRequestWrite+0xfc>)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f898 	bl	80026e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e010      	b.n	80025e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025c2:	897b      	ldrh	r3, [r7, #10]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	4907      	ldr	r1, [pc, #28]	@ (80025f0 <I2C_MasterRequestWrite+0x100>)
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f888 	bl	80026e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	00010008 	.word	0x00010008
 80025f0:	00010002 	.word	0x00010002

080025f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002604:	e048      	b.n	8002698 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800260c:	d044      	beq.n	8002698 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260e:	f7fe fc9d 	bl	8000f4c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <I2C_WaitOnFlagUntilTimeout+0x30>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d139      	bne.n	8002698 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	0c1b      	lsrs	r3, r3, #16
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d10d      	bne.n	800264a <I2C_WaitOnFlagUntilTimeout+0x56>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	43da      	mvns	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	4013      	ands	r3, r2
 800263a:	b29b      	uxth	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf0c      	ite	eq
 8002640:	2301      	moveq	r3, #1
 8002642:	2300      	movne	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	e00c      	b.n	8002664 <I2C_WaitOnFlagUntilTimeout+0x70>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	43da      	mvns	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4013      	ands	r3, r2
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	429a      	cmp	r2, r3
 8002668:	d116      	bne.n	8002698 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	f043 0220 	orr.w	r2, r3, #32
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e023      	b.n	80026e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	0c1b      	lsrs	r3, r3, #16
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d10d      	bne.n	80026be <I2C_WaitOnFlagUntilTimeout+0xca>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	43da      	mvns	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4013      	ands	r3, r2
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf0c      	ite	eq
 80026b4:	2301      	moveq	r3, #1
 80026b6:	2300      	movne	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	e00c      	b.n	80026d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	43da      	mvns	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4013      	ands	r3, r2
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d093      	beq.n	8002606 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026f6:	e071      	b.n	80027dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002706:	d123      	bne.n	8002750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002716:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002720:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	f043 0204 	orr.w	r2, r3, #4
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e067      	b.n	8002820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002756:	d041      	beq.n	80027dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002758:	f7fe fbf8 	bl	8000f4c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	429a      	cmp	r2, r3
 8002766:	d302      	bcc.n	800276e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d136      	bne.n	80027dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	0c1b      	lsrs	r3, r3, #16
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d10c      	bne.n	8002792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4013      	ands	r3, r2
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	bf14      	ite	ne
 800278a:	2301      	movne	r3, #1
 800278c:	2300      	moveq	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	e00b      	b.n	80027aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	43da      	mvns	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	4013      	ands	r3, r2
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d016      	beq.n	80027dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	f043 0220 	orr.w	r2, r3, #32
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e021      	b.n	8002820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	0c1b      	lsrs	r3, r3, #16
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d10c      	bne.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	43da      	mvns	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4013      	ands	r3, r2
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf14      	ite	ne
 80027f8:	2301      	movne	r3, #1
 80027fa:	2300      	moveq	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	e00b      	b.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	43da      	mvns	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4013      	ands	r3, r2
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	bf14      	ite	ne
 8002812:	2301      	movne	r3, #1
 8002814:	2300      	moveq	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	f47f af6d 	bne.w	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002834:	e034      	b.n	80028a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 f886 	bl	8002948 <I2C_IsAcknowledgeFailed>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e034      	b.n	80028b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800284c:	d028      	beq.n	80028a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284e:	f7fe fb7d 	bl	8000f4c <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	429a      	cmp	r2, r3
 800285c:	d302      	bcc.n	8002864 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d11d      	bne.n	80028a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800286e:	2b80      	cmp	r3, #128	@ 0x80
 8002870:	d016      	beq.n	80028a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	f043 0220 	orr.w	r2, r3, #32
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e007      	b.n	80028b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028aa:	2b80      	cmp	r3, #128	@ 0x80
 80028ac:	d1c3      	bne.n	8002836 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028c4:	e034      	b.n	8002930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f83e 	bl	8002948 <I2C_IsAcknowledgeFailed>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e034      	b.n	8002940 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028dc:	d028      	beq.n	8002930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028de:	f7fe fb35 	bl	8000f4c <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d302      	bcc.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d11d      	bne.n	8002930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d016      	beq.n	8002930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	f043 0220 	orr.w	r2, r3, #32
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e007      	b.n	8002940 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b04      	cmp	r3, #4
 800293c:	d1c3      	bne.n	80028c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800295e:	d11b      	bne.n	8002998 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002968:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	f043 0204 	orr.w	r2, r3, #4
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e267      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d075      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029c6:	4b88      	ldr	r3, [pc, #544]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d00c      	beq.n	80029ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d2:	4b85      	ldr	r3, [pc, #532]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d112      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029de:	4b82      	ldr	r3, [pc, #520]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029ea:	d10b      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	4b7e      	ldr	r3, [pc, #504]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d05b      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x108>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d157      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e242      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a0c:	d106      	bne.n	8002a1c <HAL_RCC_OscConfig+0x74>
 8002a0e:	4b76      	ldr	r3, [pc, #472]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a75      	ldr	r2, [pc, #468]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e01d      	b.n	8002a58 <HAL_RCC_OscConfig+0xb0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x98>
 8002a26:	4b70      	ldr	r3, [pc, #448]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a6f      	ldr	r2, [pc, #444]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b6d      	ldr	r3, [pc, #436]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a6c      	ldr	r2, [pc, #432]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0xb0>
 8002a40:	4b69      	ldr	r3, [pc, #420]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a68      	ldr	r2, [pc, #416]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b66      	ldr	r3, [pc, #408]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a65      	ldr	r2, [pc, #404]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fe fa74 	bl	8000f4c <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a68:	f7fe fa70 	bl	8000f4c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	@ 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e207      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0xc0>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7fe fa60 	bl	8000f4c <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a90:	f7fe fa5c 	bl	8000f4c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	@ 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e1f3      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	4b51      	ldr	r3, [pc, #324]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0xe8>
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d063      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002abe:	4b4a      	ldr	r3, [pc, #296]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aca:	4b47      	ldr	r3, [pc, #284]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d11c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad6:	4b44      	ldr	r3, [pc, #272]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d116      	bne.n	8002b10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	4b41      	ldr	r3, [pc, #260]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x152>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e1c7      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afa:	4b3b      	ldr	r3, [pc, #236]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4937      	ldr	r1, [pc, #220]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	e03a      	b.n	8002b86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b18:	4b34      	ldr	r3, [pc, #208]	@ (8002bec <HAL_RCC_OscConfig+0x244>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fa15 	bl	8000f4c <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b26:	f7fe fa11 	bl	8000f4c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e1a8      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	4b2b      	ldr	r3, [pc, #172]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b44:	4b28      	ldr	r3, [pc, #160]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4925      	ldr	r1, [pc, #148]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
 8002b58:	e015      	b.n	8002b86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b5a:	4b24      	ldr	r3, [pc, #144]	@ (8002bec <HAL_RCC_OscConfig+0x244>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe f9f4 	bl	8000f4c <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b68:	f7fe f9f0 	bl	8000f4c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e187      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d036      	beq.n	8002c00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9a:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <HAL_RCC_OscConfig+0x248>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fe f9d4 	bl	8000f4c <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba8:	f7fe f9d0 	bl	8000f4c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e167      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x200>
 8002bc6:	e01b      	b.n	8002c00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc8:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <HAL_RCC_OscConfig+0x248>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bce:	f7fe f9bd 	bl	8000f4c <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	e00e      	b.n	8002bf4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd6:	f7fe f9b9 	bl	8000f4c <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d907      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e150      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
 8002be8:	40023800 	.word	0x40023800
 8002bec:	42470000 	.word	0x42470000
 8002bf0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	4b88      	ldr	r3, [pc, #544]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1ea      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8097 	beq.w	8002d3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c12:	4b81      	ldr	r3, [pc, #516]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10f      	bne.n	8002c3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	4b7d      	ldr	r3, [pc, #500]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	4a7c      	ldr	r2, [pc, #496]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3e:	4b77      	ldr	r3, [pc, #476]	@ (8002e1c <HAL_RCC_OscConfig+0x474>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d118      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4a:	4b74      	ldr	r3, [pc, #464]	@ (8002e1c <HAL_RCC_OscConfig+0x474>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a73      	ldr	r2, [pc, #460]	@ (8002e1c <HAL_RCC_OscConfig+0x474>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c56:	f7fe f979 	bl	8000f4c <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5e:	f7fe f975 	bl	8000f4c <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e10c      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	4b6a      	ldr	r3, [pc, #424]	@ (8002e1c <HAL_RCC_OscConfig+0x474>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x2ea>
 8002c84:	4b64      	ldr	r3, [pc, #400]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c88:	4a63      	ldr	r2, [pc, #396]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c90:	e01c      	b.n	8002ccc <HAL_RCC_OscConfig+0x324>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x30c>
 8002c9a:	4b5f      	ldr	r3, [pc, #380]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9e:	4a5e      	ldr	r2, [pc, #376]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	f043 0304 	orr.w	r3, r3, #4
 8002ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002caa:	4a5b      	ldr	r2, [pc, #364]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCC_OscConfig+0x324>
 8002cb4:	4b58      	ldr	r3, [pc, #352]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb8:	4a57      	ldr	r2, [pc, #348]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc0:	4b55      	ldr	r3, [pc, #340]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc4:	4a54      	ldr	r2, [pc, #336]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	f023 0304 	bic.w	r3, r3, #4
 8002cca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d015      	beq.n	8002d00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7fe f93a 	bl	8000f4c <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7fe f936 	bl	8000f4c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e0cb      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf2:	4b49      	ldr	r3, [pc, #292]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0ee      	beq.n	8002cdc <HAL_RCC_OscConfig+0x334>
 8002cfe:	e014      	b.n	8002d2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d00:	f7fe f924 	bl	8000f4c <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f7fe f920 	bl	8000f4c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e0b5      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ee      	bne.n	8002d08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d30:	4b39      	ldr	r3, [pc, #228]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	4a38      	ldr	r2, [pc, #224]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80a1 	beq.w	8002e88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d46:	4b34      	ldr	r3, [pc, #208]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d05c      	beq.n	8002e0c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d141      	bne.n	8002dde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5a:	4b31      	ldr	r3, [pc, #196]	@ (8002e20 <HAL_RCC_OscConfig+0x478>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe f8f4 	bl	8000f4c <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe f8f0 	bl	8000f4c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e087      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	4b27      	ldr	r3, [pc, #156]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	019b      	lsls	r3, r3, #6
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9c:	085b      	lsrs	r3, r3, #1
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da8:	061b      	lsls	r3, r3, #24
 8002daa:	491b      	ldr	r1, [pc, #108]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e20 <HAL_RCC_OscConfig+0x478>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7fe f8c9 	bl	8000f4c <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7fe f8c5 	bl	8000f4c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e05c      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd0:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x416>
 8002ddc:	e054      	b.n	8002e88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <HAL_RCC_OscConfig+0x478>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7fe f8b2 	bl	8000f4c <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe f8ae 	bl	8000f4c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e045      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x444>
 8002e0a:	e03d      	b.n	8002e88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d107      	bne.n	8002e24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e038      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40007000 	.word	0x40007000
 8002e20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	@ (8002e94 <HAL_RCC_OscConfig+0x4ec>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d028      	beq.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d121      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d11a      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e54:	4013      	ands	r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d111      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6a:	085b      	lsrs	r3, r3, #1
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800

08002e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0cc      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eac:	4b68      	ldr	r3, [pc, #416]	@ (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d90c      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b65      	ldr	r3, [pc, #404]	@ (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b63      	ldr	r3, [pc, #396]	@ (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0b8      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eec:	4b59      	ldr	r3, [pc, #356]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a58      	ldr	r2, [pc, #352]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ef6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f04:	4b53      	ldr	r3, [pc, #332]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a52      	ldr	r2, [pc, #328]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f10:	4b50      	ldr	r3, [pc, #320]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	494d      	ldr	r1, [pc, #308]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d044      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d107      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	4b47      	ldr	r3, [pc, #284]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d119      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e07f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d003      	beq.n	8002f56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	4b3f      	ldr	r3, [pc, #252]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e06f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f66:	4b3b      	ldr	r3, [pc, #236]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e067      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f76:	4b37      	ldr	r3, [pc, #220]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f023 0203 	bic.w	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4934      	ldr	r1, [pc, #208]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f88:	f7fd ffe0 	bl	8000f4c <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f90:	f7fd ffdc 	bl	8000f4c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e04f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 020c 	and.w	r2, r3, #12
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1eb      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b25      	ldr	r3, [pc, #148]	@ (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d20c      	bcs.n	8002fe0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b22      	ldr	r3, [pc, #136]	@ (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b20      	ldr	r3, [pc, #128]	@ (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e032      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fec:	4b19      	ldr	r3, [pc, #100]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4916      	ldr	r1, [pc, #88]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800300a:	4b12      	ldr	r3, [pc, #72]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	490e      	ldr	r1, [pc, #56]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800301e:	f000 f821 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 8003022:	4602      	mov	r2, r0
 8003024:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	490a      	ldr	r1, [pc, #40]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8003030:	5ccb      	ldrb	r3, [r1, r3]
 8003032:	fa22 f303 	lsr.w	r3, r2, r3
 8003036:	4a09      	ldr	r2, [pc, #36]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800303a:	4b09      	ldr	r3, [pc, #36]	@ (8003060 <HAL_RCC_ClockConfig+0x1c8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd ff40 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023c00 	.word	0x40023c00
 8003054:	40023800 	.word	0x40023800
 8003058:	08003c18 	.word	0x08003c18
 800305c:	20000000 	.word	0x20000000
 8003060:	20000004 	.word	0x20000004

08003064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003068:	b094      	sub	sp, #80	@ 0x50
 800306a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800307c:	4b79      	ldr	r3, [pc, #484]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b08      	cmp	r3, #8
 8003086:	d00d      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003088:	2b08      	cmp	r3, #8
 800308a:	f200 80e1 	bhi.w	8003250 <HAL_RCC_GetSysClockFreq+0x1ec>
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0x34>
 8003092:	2b04      	cmp	r3, #4
 8003094:	d003      	beq.n	800309e <HAL_RCC_GetSysClockFreq+0x3a>
 8003096:	e0db      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003098:	4b73      	ldr	r3, [pc, #460]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x204>)
 800309a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800309c:	e0db      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800309e:	4b73      	ldr	r3, [pc, #460]	@ (800326c <HAL_RCC_GetSysClockFreq+0x208>)
 80030a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030a2:	e0d8      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d063      	beq.n	8003182 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	099b      	lsrs	r3, r3, #6
 80030c0:	2200      	movs	r2, #0
 80030c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80030ce:	2300      	movs	r3, #0
 80030d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80030d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030d6:	4622      	mov	r2, r4
 80030d8:	462b      	mov	r3, r5
 80030da:	f04f 0000 	mov.w	r0, #0
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	0159      	lsls	r1, r3, #5
 80030e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e8:	0150      	lsls	r0, r2, #5
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4621      	mov	r1, r4
 80030f0:	1a51      	subs	r1, r2, r1
 80030f2:	6139      	str	r1, [r7, #16]
 80030f4:	4629      	mov	r1, r5
 80030f6:	eb63 0301 	sbc.w	r3, r3, r1
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003108:	4659      	mov	r1, fp
 800310a:	018b      	lsls	r3, r1, #6
 800310c:	4651      	mov	r1, sl
 800310e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003112:	4651      	mov	r1, sl
 8003114:	018a      	lsls	r2, r1, #6
 8003116:	4651      	mov	r1, sl
 8003118:	ebb2 0801 	subs.w	r8, r2, r1
 800311c:	4659      	mov	r1, fp
 800311e:	eb63 0901 	sbc.w	r9, r3, r1
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800312e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003136:	4690      	mov	r8, r2
 8003138:	4699      	mov	r9, r3
 800313a:	4623      	mov	r3, r4
 800313c:	eb18 0303 	adds.w	r3, r8, r3
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	462b      	mov	r3, r5
 8003144:	eb49 0303 	adc.w	r3, r9, r3
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003156:	4629      	mov	r1, r5
 8003158:	024b      	lsls	r3, r1, #9
 800315a:	4621      	mov	r1, r4
 800315c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003160:	4621      	mov	r1, r4
 8003162:	024a      	lsls	r2, r1, #9
 8003164:	4610      	mov	r0, r2
 8003166:	4619      	mov	r1, r3
 8003168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800316a:	2200      	movs	r2, #0
 800316c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800316e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003170:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003174:	f7fd f87c 	bl	8000270 <__aeabi_uldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4613      	mov	r3, r2
 800317e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003180:	e058      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003182:	4b38      	ldr	r3, [pc, #224]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	099b      	lsrs	r3, r3, #6
 8003188:	2200      	movs	r2, #0
 800318a:	4618      	mov	r0, r3
 800318c:	4611      	mov	r1, r2
 800318e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003192:	623b      	str	r3, [r7, #32]
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	@ 0x24
 8003198:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800319c:	4642      	mov	r2, r8
 800319e:	464b      	mov	r3, r9
 80031a0:	f04f 0000 	mov.w	r0, #0
 80031a4:	f04f 0100 	mov.w	r1, #0
 80031a8:	0159      	lsls	r1, r3, #5
 80031aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ae:	0150      	lsls	r0, r2, #5
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4641      	mov	r1, r8
 80031b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80031ba:	4649      	mov	r1, r9
 80031bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031d4:	ebb2 040a 	subs.w	r4, r2, sl
 80031d8:	eb63 050b 	sbc.w	r5, r3, fp
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	00eb      	lsls	r3, r5, #3
 80031e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ea:	00e2      	lsls	r2, r4, #3
 80031ec:	4614      	mov	r4, r2
 80031ee:	461d      	mov	r5, r3
 80031f0:	4643      	mov	r3, r8
 80031f2:	18e3      	adds	r3, r4, r3
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	464b      	mov	r3, r9
 80031f8:	eb45 0303 	adc.w	r3, r5, r3
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	e9d7 4500 	ldrd	r4, r5, [r7]
 800320a:	4629      	mov	r1, r5
 800320c:	028b      	lsls	r3, r1, #10
 800320e:	4621      	mov	r1, r4
 8003210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003214:	4621      	mov	r1, r4
 8003216:	028a      	lsls	r2, r1, #10
 8003218:	4610      	mov	r0, r2
 800321a:	4619      	mov	r1, r3
 800321c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800321e:	2200      	movs	r2, #0
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	61fa      	str	r2, [r7, #28]
 8003224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003228:	f7fd f822 	bl	8000270 <__aeabi_uldivmod>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4613      	mov	r3, r2
 8003232:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	0c1b      	lsrs	r3, r3, #16
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	3301      	adds	r3, #1
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003244:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003248:	fbb2 f3f3 	udiv	r3, r2, r3
 800324c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800324e:	e002      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003250:	4b05      	ldr	r3, [pc, #20]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x204>)
 8003252:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003258:	4618      	mov	r0, r3
 800325a:	3750      	adds	r7, #80	@ 0x50
 800325c:	46bd      	mov	sp, r7
 800325e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800
 8003268:	00f42400 	.word	0x00f42400
 800326c:	007a1200 	.word	0x007a1200

08003270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003274:	4b03      	ldr	r3, [pc, #12]	@ (8003284 <HAL_RCC_GetHCLKFreq+0x14>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000000 	.word	0x20000000

08003288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800328c:	f7ff fff0 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 8003290:	4602      	mov	r2, r0
 8003292:	4b05      	ldr	r3, [pc, #20]	@ (80032a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	0a9b      	lsrs	r3, r3, #10
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	4903      	ldr	r1, [pc, #12]	@ (80032ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800329e:	5ccb      	ldrb	r3, [r1, r3]
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40023800 	.word	0x40023800
 80032ac:	08003c28 	.word	0x08003c28

080032b0 <siprintf>:
 80032b0:	b40e      	push	{r1, r2, r3}
 80032b2:	b500      	push	{lr}
 80032b4:	b09c      	sub	sp, #112	@ 0x70
 80032b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80032b8:	9002      	str	r0, [sp, #8]
 80032ba:	9006      	str	r0, [sp, #24]
 80032bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80032c0:	4809      	ldr	r0, [pc, #36]	@ (80032e8 <siprintf+0x38>)
 80032c2:	9107      	str	r1, [sp, #28]
 80032c4:	9104      	str	r1, [sp, #16]
 80032c6:	4909      	ldr	r1, [pc, #36]	@ (80032ec <siprintf+0x3c>)
 80032c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80032cc:	9105      	str	r1, [sp, #20]
 80032ce:	6800      	ldr	r0, [r0, #0]
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	a902      	add	r1, sp, #8
 80032d4:	f000 f994 	bl	8003600 <_svfiprintf_r>
 80032d8:	9b02      	ldr	r3, [sp, #8]
 80032da:	2200      	movs	r2, #0
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	b01c      	add	sp, #112	@ 0x70
 80032e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80032e4:	b003      	add	sp, #12
 80032e6:	4770      	bx	lr
 80032e8:	2000000c 	.word	0x2000000c
 80032ec:	ffff0208 	.word	0xffff0208

080032f0 <memset>:
 80032f0:	4402      	add	r2, r0
 80032f2:	4603      	mov	r3, r0
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d100      	bne.n	80032fa <memset+0xa>
 80032f8:	4770      	bx	lr
 80032fa:	f803 1b01 	strb.w	r1, [r3], #1
 80032fe:	e7f9      	b.n	80032f4 <memset+0x4>

08003300 <__errno>:
 8003300:	4b01      	ldr	r3, [pc, #4]	@ (8003308 <__errno+0x8>)
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	2000000c 	.word	0x2000000c

0800330c <__libc_init_array>:
 800330c:	b570      	push	{r4, r5, r6, lr}
 800330e:	4d0d      	ldr	r5, [pc, #52]	@ (8003344 <__libc_init_array+0x38>)
 8003310:	4c0d      	ldr	r4, [pc, #52]	@ (8003348 <__libc_init_array+0x3c>)
 8003312:	1b64      	subs	r4, r4, r5
 8003314:	10a4      	asrs	r4, r4, #2
 8003316:	2600      	movs	r6, #0
 8003318:	42a6      	cmp	r6, r4
 800331a:	d109      	bne.n	8003330 <__libc_init_array+0x24>
 800331c:	4d0b      	ldr	r5, [pc, #44]	@ (800334c <__libc_init_array+0x40>)
 800331e:	4c0c      	ldr	r4, [pc, #48]	@ (8003350 <__libc_init_array+0x44>)
 8003320:	f000 fc66 	bl	8003bf0 <_init>
 8003324:	1b64      	subs	r4, r4, r5
 8003326:	10a4      	asrs	r4, r4, #2
 8003328:	2600      	movs	r6, #0
 800332a:	42a6      	cmp	r6, r4
 800332c:	d105      	bne.n	800333a <__libc_init_array+0x2e>
 800332e:	bd70      	pop	{r4, r5, r6, pc}
 8003330:	f855 3b04 	ldr.w	r3, [r5], #4
 8003334:	4798      	blx	r3
 8003336:	3601      	adds	r6, #1
 8003338:	e7ee      	b.n	8003318 <__libc_init_array+0xc>
 800333a:	f855 3b04 	ldr.w	r3, [r5], #4
 800333e:	4798      	blx	r3
 8003340:	3601      	adds	r6, #1
 8003342:	e7f2      	b.n	800332a <__libc_init_array+0x1e>
 8003344:	08003c6c 	.word	0x08003c6c
 8003348:	08003c6c 	.word	0x08003c6c
 800334c:	08003c6c 	.word	0x08003c6c
 8003350:	08003c70 	.word	0x08003c70

08003354 <__retarget_lock_acquire_recursive>:
 8003354:	4770      	bx	lr

08003356 <__retarget_lock_release_recursive>:
 8003356:	4770      	bx	lr

08003358 <_free_r>:
 8003358:	b538      	push	{r3, r4, r5, lr}
 800335a:	4605      	mov	r5, r0
 800335c:	2900      	cmp	r1, #0
 800335e:	d041      	beq.n	80033e4 <_free_r+0x8c>
 8003360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003364:	1f0c      	subs	r4, r1, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	bfb8      	it	lt
 800336a:	18e4      	addlt	r4, r4, r3
 800336c:	f000 f8e0 	bl	8003530 <__malloc_lock>
 8003370:	4a1d      	ldr	r2, [pc, #116]	@ (80033e8 <_free_r+0x90>)
 8003372:	6813      	ldr	r3, [r2, #0]
 8003374:	b933      	cbnz	r3, 8003384 <_free_r+0x2c>
 8003376:	6063      	str	r3, [r4, #4]
 8003378:	6014      	str	r4, [r2, #0]
 800337a:	4628      	mov	r0, r5
 800337c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003380:	f000 b8dc 	b.w	800353c <__malloc_unlock>
 8003384:	42a3      	cmp	r3, r4
 8003386:	d908      	bls.n	800339a <_free_r+0x42>
 8003388:	6820      	ldr	r0, [r4, #0]
 800338a:	1821      	adds	r1, r4, r0
 800338c:	428b      	cmp	r3, r1
 800338e:	bf01      	itttt	eq
 8003390:	6819      	ldreq	r1, [r3, #0]
 8003392:	685b      	ldreq	r3, [r3, #4]
 8003394:	1809      	addeq	r1, r1, r0
 8003396:	6021      	streq	r1, [r4, #0]
 8003398:	e7ed      	b.n	8003376 <_free_r+0x1e>
 800339a:	461a      	mov	r2, r3
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	b10b      	cbz	r3, 80033a4 <_free_r+0x4c>
 80033a0:	42a3      	cmp	r3, r4
 80033a2:	d9fa      	bls.n	800339a <_free_r+0x42>
 80033a4:	6811      	ldr	r1, [r2, #0]
 80033a6:	1850      	adds	r0, r2, r1
 80033a8:	42a0      	cmp	r0, r4
 80033aa:	d10b      	bne.n	80033c4 <_free_r+0x6c>
 80033ac:	6820      	ldr	r0, [r4, #0]
 80033ae:	4401      	add	r1, r0
 80033b0:	1850      	adds	r0, r2, r1
 80033b2:	4283      	cmp	r3, r0
 80033b4:	6011      	str	r1, [r2, #0]
 80033b6:	d1e0      	bne.n	800337a <_free_r+0x22>
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	6053      	str	r3, [r2, #4]
 80033be:	4408      	add	r0, r1
 80033c0:	6010      	str	r0, [r2, #0]
 80033c2:	e7da      	b.n	800337a <_free_r+0x22>
 80033c4:	d902      	bls.n	80033cc <_free_r+0x74>
 80033c6:	230c      	movs	r3, #12
 80033c8:	602b      	str	r3, [r5, #0]
 80033ca:	e7d6      	b.n	800337a <_free_r+0x22>
 80033cc:	6820      	ldr	r0, [r4, #0]
 80033ce:	1821      	adds	r1, r4, r0
 80033d0:	428b      	cmp	r3, r1
 80033d2:	bf04      	itt	eq
 80033d4:	6819      	ldreq	r1, [r3, #0]
 80033d6:	685b      	ldreq	r3, [r3, #4]
 80033d8:	6063      	str	r3, [r4, #4]
 80033da:	bf04      	itt	eq
 80033dc:	1809      	addeq	r1, r1, r0
 80033de:	6021      	streq	r1, [r4, #0]
 80033e0:	6054      	str	r4, [r2, #4]
 80033e2:	e7ca      	b.n	800337a <_free_r+0x22>
 80033e4:	bd38      	pop	{r3, r4, r5, pc}
 80033e6:	bf00      	nop
 80033e8:	20000278 	.word	0x20000278

080033ec <sbrk_aligned>:
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	4e0f      	ldr	r6, [pc, #60]	@ (800342c <sbrk_aligned+0x40>)
 80033f0:	460c      	mov	r4, r1
 80033f2:	6831      	ldr	r1, [r6, #0]
 80033f4:	4605      	mov	r5, r0
 80033f6:	b911      	cbnz	r1, 80033fe <sbrk_aligned+0x12>
 80033f8:	f000 fba6 	bl	8003b48 <_sbrk_r>
 80033fc:	6030      	str	r0, [r6, #0]
 80033fe:	4621      	mov	r1, r4
 8003400:	4628      	mov	r0, r5
 8003402:	f000 fba1 	bl	8003b48 <_sbrk_r>
 8003406:	1c43      	adds	r3, r0, #1
 8003408:	d103      	bne.n	8003412 <sbrk_aligned+0x26>
 800340a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800340e:	4620      	mov	r0, r4
 8003410:	bd70      	pop	{r4, r5, r6, pc}
 8003412:	1cc4      	adds	r4, r0, #3
 8003414:	f024 0403 	bic.w	r4, r4, #3
 8003418:	42a0      	cmp	r0, r4
 800341a:	d0f8      	beq.n	800340e <sbrk_aligned+0x22>
 800341c:	1a21      	subs	r1, r4, r0
 800341e:	4628      	mov	r0, r5
 8003420:	f000 fb92 	bl	8003b48 <_sbrk_r>
 8003424:	3001      	adds	r0, #1
 8003426:	d1f2      	bne.n	800340e <sbrk_aligned+0x22>
 8003428:	e7ef      	b.n	800340a <sbrk_aligned+0x1e>
 800342a:	bf00      	nop
 800342c:	20000274 	.word	0x20000274

08003430 <_malloc_r>:
 8003430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003434:	1ccd      	adds	r5, r1, #3
 8003436:	f025 0503 	bic.w	r5, r5, #3
 800343a:	3508      	adds	r5, #8
 800343c:	2d0c      	cmp	r5, #12
 800343e:	bf38      	it	cc
 8003440:	250c      	movcc	r5, #12
 8003442:	2d00      	cmp	r5, #0
 8003444:	4606      	mov	r6, r0
 8003446:	db01      	blt.n	800344c <_malloc_r+0x1c>
 8003448:	42a9      	cmp	r1, r5
 800344a:	d904      	bls.n	8003456 <_malloc_r+0x26>
 800344c:	230c      	movs	r3, #12
 800344e:	6033      	str	r3, [r6, #0]
 8003450:	2000      	movs	r0, #0
 8003452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003456:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800352c <_malloc_r+0xfc>
 800345a:	f000 f869 	bl	8003530 <__malloc_lock>
 800345e:	f8d8 3000 	ldr.w	r3, [r8]
 8003462:	461c      	mov	r4, r3
 8003464:	bb44      	cbnz	r4, 80034b8 <_malloc_r+0x88>
 8003466:	4629      	mov	r1, r5
 8003468:	4630      	mov	r0, r6
 800346a:	f7ff ffbf 	bl	80033ec <sbrk_aligned>
 800346e:	1c43      	adds	r3, r0, #1
 8003470:	4604      	mov	r4, r0
 8003472:	d158      	bne.n	8003526 <_malloc_r+0xf6>
 8003474:	f8d8 4000 	ldr.w	r4, [r8]
 8003478:	4627      	mov	r7, r4
 800347a:	2f00      	cmp	r7, #0
 800347c:	d143      	bne.n	8003506 <_malloc_r+0xd6>
 800347e:	2c00      	cmp	r4, #0
 8003480:	d04b      	beq.n	800351a <_malloc_r+0xea>
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	4639      	mov	r1, r7
 8003486:	4630      	mov	r0, r6
 8003488:	eb04 0903 	add.w	r9, r4, r3
 800348c:	f000 fb5c 	bl	8003b48 <_sbrk_r>
 8003490:	4581      	cmp	r9, r0
 8003492:	d142      	bne.n	800351a <_malloc_r+0xea>
 8003494:	6821      	ldr	r1, [r4, #0]
 8003496:	1a6d      	subs	r5, r5, r1
 8003498:	4629      	mov	r1, r5
 800349a:	4630      	mov	r0, r6
 800349c:	f7ff ffa6 	bl	80033ec <sbrk_aligned>
 80034a0:	3001      	adds	r0, #1
 80034a2:	d03a      	beq.n	800351a <_malloc_r+0xea>
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	442b      	add	r3, r5
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	f8d8 3000 	ldr.w	r3, [r8]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	bb62      	cbnz	r2, 800350c <_malloc_r+0xdc>
 80034b2:	f8c8 7000 	str.w	r7, [r8]
 80034b6:	e00f      	b.n	80034d8 <_malloc_r+0xa8>
 80034b8:	6822      	ldr	r2, [r4, #0]
 80034ba:	1b52      	subs	r2, r2, r5
 80034bc:	d420      	bmi.n	8003500 <_malloc_r+0xd0>
 80034be:	2a0b      	cmp	r2, #11
 80034c0:	d917      	bls.n	80034f2 <_malloc_r+0xc2>
 80034c2:	1961      	adds	r1, r4, r5
 80034c4:	42a3      	cmp	r3, r4
 80034c6:	6025      	str	r5, [r4, #0]
 80034c8:	bf18      	it	ne
 80034ca:	6059      	strne	r1, [r3, #4]
 80034cc:	6863      	ldr	r3, [r4, #4]
 80034ce:	bf08      	it	eq
 80034d0:	f8c8 1000 	streq.w	r1, [r8]
 80034d4:	5162      	str	r2, [r4, r5]
 80034d6:	604b      	str	r3, [r1, #4]
 80034d8:	4630      	mov	r0, r6
 80034da:	f000 f82f 	bl	800353c <__malloc_unlock>
 80034de:	f104 000b 	add.w	r0, r4, #11
 80034e2:	1d23      	adds	r3, r4, #4
 80034e4:	f020 0007 	bic.w	r0, r0, #7
 80034e8:	1ac2      	subs	r2, r0, r3
 80034ea:	bf1c      	itt	ne
 80034ec:	1a1b      	subne	r3, r3, r0
 80034ee:	50a3      	strne	r3, [r4, r2]
 80034f0:	e7af      	b.n	8003452 <_malloc_r+0x22>
 80034f2:	6862      	ldr	r2, [r4, #4]
 80034f4:	42a3      	cmp	r3, r4
 80034f6:	bf0c      	ite	eq
 80034f8:	f8c8 2000 	streq.w	r2, [r8]
 80034fc:	605a      	strne	r2, [r3, #4]
 80034fe:	e7eb      	b.n	80034d8 <_malloc_r+0xa8>
 8003500:	4623      	mov	r3, r4
 8003502:	6864      	ldr	r4, [r4, #4]
 8003504:	e7ae      	b.n	8003464 <_malloc_r+0x34>
 8003506:	463c      	mov	r4, r7
 8003508:	687f      	ldr	r7, [r7, #4]
 800350a:	e7b6      	b.n	800347a <_malloc_r+0x4a>
 800350c:	461a      	mov	r2, r3
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	42a3      	cmp	r3, r4
 8003512:	d1fb      	bne.n	800350c <_malloc_r+0xdc>
 8003514:	2300      	movs	r3, #0
 8003516:	6053      	str	r3, [r2, #4]
 8003518:	e7de      	b.n	80034d8 <_malloc_r+0xa8>
 800351a:	230c      	movs	r3, #12
 800351c:	6033      	str	r3, [r6, #0]
 800351e:	4630      	mov	r0, r6
 8003520:	f000 f80c 	bl	800353c <__malloc_unlock>
 8003524:	e794      	b.n	8003450 <_malloc_r+0x20>
 8003526:	6005      	str	r5, [r0, #0]
 8003528:	e7d6      	b.n	80034d8 <_malloc_r+0xa8>
 800352a:	bf00      	nop
 800352c:	20000278 	.word	0x20000278

08003530 <__malloc_lock>:
 8003530:	4801      	ldr	r0, [pc, #4]	@ (8003538 <__malloc_lock+0x8>)
 8003532:	f7ff bf0f 	b.w	8003354 <__retarget_lock_acquire_recursive>
 8003536:	bf00      	nop
 8003538:	20000270 	.word	0x20000270

0800353c <__malloc_unlock>:
 800353c:	4801      	ldr	r0, [pc, #4]	@ (8003544 <__malloc_unlock+0x8>)
 800353e:	f7ff bf0a 	b.w	8003356 <__retarget_lock_release_recursive>
 8003542:	bf00      	nop
 8003544:	20000270 	.word	0x20000270

08003548 <__ssputs_r>:
 8003548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800354c:	688e      	ldr	r6, [r1, #8]
 800354e:	461f      	mov	r7, r3
 8003550:	42be      	cmp	r6, r7
 8003552:	680b      	ldr	r3, [r1, #0]
 8003554:	4682      	mov	sl, r0
 8003556:	460c      	mov	r4, r1
 8003558:	4690      	mov	r8, r2
 800355a:	d82d      	bhi.n	80035b8 <__ssputs_r+0x70>
 800355c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003560:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003564:	d026      	beq.n	80035b4 <__ssputs_r+0x6c>
 8003566:	6965      	ldr	r5, [r4, #20]
 8003568:	6909      	ldr	r1, [r1, #16]
 800356a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800356e:	eba3 0901 	sub.w	r9, r3, r1
 8003572:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003576:	1c7b      	adds	r3, r7, #1
 8003578:	444b      	add	r3, r9
 800357a:	106d      	asrs	r5, r5, #1
 800357c:	429d      	cmp	r5, r3
 800357e:	bf38      	it	cc
 8003580:	461d      	movcc	r5, r3
 8003582:	0553      	lsls	r3, r2, #21
 8003584:	d527      	bpl.n	80035d6 <__ssputs_r+0x8e>
 8003586:	4629      	mov	r1, r5
 8003588:	f7ff ff52 	bl	8003430 <_malloc_r>
 800358c:	4606      	mov	r6, r0
 800358e:	b360      	cbz	r0, 80035ea <__ssputs_r+0xa2>
 8003590:	6921      	ldr	r1, [r4, #16]
 8003592:	464a      	mov	r2, r9
 8003594:	f000 fae8 	bl	8003b68 <memcpy>
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800359e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035a2:	81a3      	strh	r3, [r4, #12]
 80035a4:	6126      	str	r6, [r4, #16]
 80035a6:	6165      	str	r5, [r4, #20]
 80035a8:	444e      	add	r6, r9
 80035aa:	eba5 0509 	sub.w	r5, r5, r9
 80035ae:	6026      	str	r6, [r4, #0]
 80035b0:	60a5      	str	r5, [r4, #8]
 80035b2:	463e      	mov	r6, r7
 80035b4:	42be      	cmp	r6, r7
 80035b6:	d900      	bls.n	80035ba <__ssputs_r+0x72>
 80035b8:	463e      	mov	r6, r7
 80035ba:	6820      	ldr	r0, [r4, #0]
 80035bc:	4632      	mov	r2, r6
 80035be:	4641      	mov	r1, r8
 80035c0:	f000 faa8 	bl	8003b14 <memmove>
 80035c4:	68a3      	ldr	r3, [r4, #8]
 80035c6:	1b9b      	subs	r3, r3, r6
 80035c8:	60a3      	str	r3, [r4, #8]
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	4433      	add	r3, r6
 80035ce:	6023      	str	r3, [r4, #0]
 80035d0:	2000      	movs	r0, #0
 80035d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d6:	462a      	mov	r2, r5
 80035d8:	f000 fad4 	bl	8003b84 <_realloc_r>
 80035dc:	4606      	mov	r6, r0
 80035de:	2800      	cmp	r0, #0
 80035e0:	d1e0      	bne.n	80035a4 <__ssputs_r+0x5c>
 80035e2:	6921      	ldr	r1, [r4, #16]
 80035e4:	4650      	mov	r0, sl
 80035e6:	f7ff feb7 	bl	8003358 <_free_r>
 80035ea:	230c      	movs	r3, #12
 80035ec:	f8ca 3000 	str.w	r3, [sl]
 80035f0:	89a3      	ldrh	r3, [r4, #12]
 80035f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035f6:	81a3      	strh	r3, [r4, #12]
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035fc:	e7e9      	b.n	80035d2 <__ssputs_r+0x8a>
	...

08003600 <_svfiprintf_r>:
 8003600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003604:	4698      	mov	r8, r3
 8003606:	898b      	ldrh	r3, [r1, #12]
 8003608:	061b      	lsls	r3, r3, #24
 800360a:	b09d      	sub	sp, #116	@ 0x74
 800360c:	4607      	mov	r7, r0
 800360e:	460d      	mov	r5, r1
 8003610:	4614      	mov	r4, r2
 8003612:	d510      	bpl.n	8003636 <_svfiprintf_r+0x36>
 8003614:	690b      	ldr	r3, [r1, #16]
 8003616:	b973      	cbnz	r3, 8003636 <_svfiprintf_r+0x36>
 8003618:	2140      	movs	r1, #64	@ 0x40
 800361a:	f7ff ff09 	bl	8003430 <_malloc_r>
 800361e:	6028      	str	r0, [r5, #0]
 8003620:	6128      	str	r0, [r5, #16]
 8003622:	b930      	cbnz	r0, 8003632 <_svfiprintf_r+0x32>
 8003624:	230c      	movs	r3, #12
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800362c:	b01d      	add	sp, #116	@ 0x74
 800362e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003632:	2340      	movs	r3, #64	@ 0x40
 8003634:	616b      	str	r3, [r5, #20]
 8003636:	2300      	movs	r3, #0
 8003638:	9309      	str	r3, [sp, #36]	@ 0x24
 800363a:	2320      	movs	r3, #32
 800363c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003640:	f8cd 800c 	str.w	r8, [sp, #12]
 8003644:	2330      	movs	r3, #48	@ 0x30
 8003646:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80037e4 <_svfiprintf_r+0x1e4>
 800364a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800364e:	f04f 0901 	mov.w	r9, #1
 8003652:	4623      	mov	r3, r4
 8003654:	469a      	mov	sl, r3
 8003656:	f813 2b01 	ldrb.w	r2, [r3], #1
 800365a:	b10a      	cbz	r2, 8003660 <_svfiprintf_r+0x60>
 800365c:	2a25      	cmp	r2, #37	@ 0x25
 800365e:	d1f9      	bne.n	8003654 <_svfiprintf_r+0x54>
 8003660:	ebba 0b04 	subs.w	fp, sl, r4
 8003664:	d00b      	beq.n	800367e <_svfiprintf_r+0x7e>
 8003666:	465b      	mov	r3, fp
 8003668:	4622      	mov	r2, r4
 800366a:	4629      	mov	r1, r5
 800366c:	4638      	mov	r0, r7
 800366e:	f7ff ff6b 	bl	8003548 <__ssputs_r>
 8003672:	3001      	adds	r0, #1
 8003674:	f000 80a7 	beq.w	80037c6 <_svfiprintf_r+0x1c6>
 8003678:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800367a:	445a      	add	r2, fp
 800367c:	9209      	str	r2, [sp, #36]	@ 0x24
 800367e:	f89a 3000 	ldrb.w	r3, [sl]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 809f 	beq.w	80037c6 <_svfiprintf_r+0x1c6>
 8003688:	2300      	movs	r3, #0
 800368a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800368e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003692:	f10a 0a01 	add.w	sl, sl, #1
 8003696:	9304      	str	r3, [sp, #16]
 8003698:	9307      	str	r3, [sp, #28]
 800369a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800369e:	931a      	str	r3, [sp, #104]	@ 0x68
 80036a0:	4654      	mov	r4, sl
 80036a2:	2205      	movs	r2, #5
 80036a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036a8:	484e      	ldr	r0, [pc, #312]	@ (80037e4 <_svfiprintf_r+0x1e4>)
 80036aa:	f7fc fd91 	bl	80001d0 <memchr>
 80036ae:	9a04      	ldr	r2, [sp, #16]
 80036b0:	b9d8      	cbnz	r0, 80036ea <_svfiprintf_r+0xea>
 80036b2:	06d0      	lsls	r0, r2, #27
 80036b4:	bf44      	itt	mi
 80036b6:	2320      	movmi	r3, #32
 80036b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036bc:	0711      	lsls	r1, r2, #28
 80036be:	bf44      	itt	mi
 80036c0:	232b      	movmi	r3, #43	@ 0x2b
 80036c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036c6:	f89a 3000 	ldrb.w	r3, [sl]
 80036ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80036cc:	d015      	beq.n	80036fa <_svfiprintf_r+0xfa>
 80036ce:	9a07      	ldr	r2, [sp, #28]
 80036d0:	4654      	mov	r4, sl
 80036d2:	2000      	movs	r0, #0
 80036d4:	f04f 0c0a 	mov.w	ip, #10
 80036d8:	4621      	mov	r1, r4
 80036da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036de:	3b30      	subs	r3, #48	@ 0x30
 80036e0:	2b09      	cmp	r3, #9
 80036e2:	d94b      	bls.n	800377c <_svfiprintf_r+0x17c>
 80036e4:	b1b0      	cbz	r0, 8003714 <_svfiprintf_r+0x114>
 80036e6:	9207      	str	r2, [sp, #28]
 80036e8:	e014      	b.n	8003714 <_svfiprintf_r+0x114>
 80036ea:	eba0 0308 	sub.w	r3, r0, r8
 80036ee:	fa09 f303 	lsl.w	r3, r9, r3
 80036f2:	4313      	orrs	r3, r2
 80036f4:	9304      	str	r3, [sp, #16]
 80036f6:	46a2      	mov	sl, r4
 80036f8:	e7d2      	b.n	80036a0 <_svfiprintf_r+0xa0>
 80036fa:	9b03      	ldr	r3, [sp, #12]
 80036fc:	1d19      	adds	r1, r3, #4
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	9103      	str	r1, [sp, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	bfbb      	ittet	lt
 8003706:	425b      	neglt	r3, r3
 8003708:	f042 0202 	orrlt.w	r2, r2, #2
 800370c:	9307      	strge	r3, [sp, #28]
 800370e:	9307      	strlt	r3, [sp, #28]
 8003710:	bfb8      	it	lt
 8003712:	9204      	strlt	r2, [sp, #16]
 8003714:	7823      	ldrb	r3, [r4, #0]
 8003716:	2b2e      	cmp	r3, #46	@ 0x2e
 8003718:	d10a      	bne.n	8003730 <_svfiprintf_r+0x130>
 800371a:	7863      	ldrb	r3, [r4, #1]
 800371c:	2b2a      	cmp	r3, #42	@ 0x2a
 800371e:	d132      	bne.n	8003786 <_svfiprintf_r+0x186>
 8003720:	9b03      	ldr	r3, [sp, #12]
 8003722:	1d1a      	adds	r2, r3, #4
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	9203      	str	r2, [sp, #12]
 8003728:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800372c:	3402      	adds	r4, #2
 800372e:	9305      	str	r3, [sp, #20]
 8003730:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80037f4 <_svfiprintf_r+0x1f4>
 8003734:	7821      	ldrb	r1, [r4, #0]
 8003736:	2203      	movs	r2, #3
 8003738:	4650      	mov	r0, sl
 800373a:	f7fc fd49 	bl	80001d0 <memchr>
 800373e:	b138      	cbz	r0, 8003750 <_svfiprintf_r+0x150>
 8003740:	9b04      	ldr	r3, [sp, #16]
 8003742:	eba0 000a 	sub.w	r0, r0, sl
 8003746:	2240      	movs	r2, #64	@ 0x40
 8003748:	4082      	lsls	r2, r0
 800374a:	4313      	orrs	r3, r2
 800374c:	3401      	adds	r4, #1
 800374e:	9304      	str	r3, [sp, #16]
 8003750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003754:	4824      	ldr	r0, [pc, #144]	@ (80037e8 <_svfiprintf_r+0x1e8>)
 8003756:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800375a:	2206      	movs	r2, #6
 800375c:	f7fc fd38 	bl	80001d0 <memchr>
 8003760:	2800      	cmp	r0, #0
 8003762:	d036      	beq.n	80037d2 <_svfiprintf_r+0x1d2>
 8003764:	4b21      	ldr	r3, [pc, #132]	@ (80037ec <_svfiprintf_r+0x1ec>)
 8003766:	bb1b      	cbnz	r3, 80037b0 <_svfiprintf_r+0x1b0>
 8003768:	9b03      	ldr	r3, [sp, #12]
 800376a:	3307      	adds	r3, #7
 800376c:	f023 0307 	bic.w	r3, r3, #7
 8003770:	3308      	adds	r3, #8
 8003772:	9303      	str	r3, [sp, #12]
 8003774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003776:	4433      	add	r3, r6
 8003778:	9309      	str	r3, [sp, #36]	@ 0x24
 800377a:	e76a      	b.n	8003652 <_svfiprintf_r+0x52>
 800377c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003780:	460c      	mov	r4, r1
 8003782:	2001      	movs	r0, #1
 8003784:	e7a8      	b.n	80036d8 <_svfiprintf_r+0xd8>
 8003786:	2300      	movs	r3, #0
 8003788:	3401      	adds	r4, #1
 800378a:	9305      	str	r3, [sp, #20]
 800378c:	4619      	mov	r1, r3
 800378e:	f04f 0c0a 	mov.w	ip, #10
 8003792:	4620      	mov	r0, r4
 8003794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003798:	3a30      	subs	r2, #48	@ 0x30
 800379a:	2a09      	cmp	r2, #9
 800379c:	d903      	bls.n	80037a6 <_svfiprintf_r+0x1a6>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0c6      	beq.n	8003730 <_svfiprintf_r+0x130>
 80037a2:	9105      	str	r1, [sp, #20]
 80037a4:	e7c4      	b.n	8003730 <_svfiprintf_r+0x130>
 80037a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80037aa:	4604      	mov	r4, r0
 80037ac:	2301      	movs	r3, #1
 80037ae:	e7f0      	b.n	8003792 <_svfiprintf_r+0x192>
 80037b0:	ab03      	add	r3, sp, #12
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	462a      	mov	r2, r5
 80037b6:	4b0e      	ldr	r3, [pc, #56]	@ (80037f0 <_svfiprintf_r+0x1f0>)
 80037b8:	a904      	add	r1, sp, #16
 80037ba:	4638      	mov	r0, r7
 80037bc:	f3af 8000 	nop.w
 80037c0:	1c42      	adds	r2, r0, #1
 80037c2:	4606      	mov	r6, r0
 80037c4:	d1d6      	bne.n	8003774 <_svfiprintf_r+0x174>
 80037c6:	89ab      	ldrh	r3, [r5, #12]
 80037c8:	065b      	lsls	r3, r3, #25
 80037ca:	f53f af2d 	bmi.w	8003628 <_svfiprintf_r+0x28>
 80037ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80037d0:	e72c      	b.n	800362c <_svfiprintf_r+0x2c>
 80037d2:	ab03      	add	r3, sp, #12
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	462a      	mov	r2, r5
 80037d8:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <_svfiprintf_r+0x1f0>)
 80037da:	a904      	add	r1, sp, #16
 80037dc:	4638      	mov	r0, r7
 80037de:	f000 f879 	bl	80038d4 <_printf_i>
 80037e2:	e7ed      	b.n	80037c0 <_svfiprintf_r+0x1c0>
 80037e4:	08003c30 	.word	0x08003c30
 80037e8:	08003c3a 	.word	0x08003c3a
 80037ec:	00000000 	.word	0x00000000
 80037f0:	08003549 	.word	0x08003549
 80037f4:	08003c36 	.word	0x08003c36

080037f8 <_printf_common>:
 80037f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037fc:	4616      	mov	r6, r2
 80037fe:	4698      	mov	r8, r3
 8003800:	688a      	ldr	r2, [r1, #8]
 8003802:	690b      	ldr	r3, [r1, #16]
 8003804:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003808:	4293      	cmp	r3, r2
 800380a:	bfb8      	it	lt
 800380c:	4613      	movlt	r3, r2
 800380e:	6033      	str	r3, [r6, #0]
 8003810:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003814:	4607      	mov	r7, r0
 8003816:	460c      	mov	r4, r1
 8003818:	b10a      	cbz	r2, 800381e <_printf_common+0x26>
 800381a:	3301      	adds	r3, #1
 800381c:	6033      	str	r3, [r6, #0]
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	0699      	lsls	r1, r3, #26
 8003822:	bf42      	ittt	mi
 8003824:	6833      	ldrmi	r3, [r6, #0]
 8003826:	3302      	addmi	r3, #2
 8003828:	6033      	strmi	r3, [r6, #0]
 800382a:	6825      	ldr	r5, [r4, #0]
 800382c:	f015 0506 	ands.w	r5, r5, #6
 8003830:	d106      	bne.n	8003840 <_printf_common+0x48>
 8003832:	f104 0a19 	add.w	sl, r4, #25
 8003836:	68e3      	ldr	r3, [r4, #12]
 8003838:	6832      	ldr	r2, [r6, #0]
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	42ab      	cmp	r3, r5
 800383e:	dc26      	bgt.n	800388e <_printf_common+0x96>
 8003840:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003844:	6822      	ldr	r2, [r4, #0]
 8003846:	3b00      	subs	r3, #0
 8003848:	bf18      	it	ne
 800384a:	2301      	movne	r3, #1
 800384c:	0692      	lsls	r2, r2, #26
 800384e:	d42b      	bmi.n	80038a8 <_printf_common+0xb0>
 8003850:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003854:	4641      	mov	r1, r8
 8003856:	4638      	mov	r0, r7
 8003858:	47c8      	blx	r9
 800385a:	3001      	adds	r0, #1
 800385c:	d01e      	beq.n	800389c <_printf_common+0xa4>
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	6922      	ldr	r2, [r4, #16]
 8003862:	f003 0306 	and.w	r3, r3, #6
 8003866:	2b04      	cmp	r3, #4
 8003868:	bf02      	ittt	eq
 800386a:	68e5      	ldreq	r5, [r4, #12]
 800386c:	6833      	ldreq	r3, [r6, #0]
 800386e:	1aed      	subeq	r5, r5, r3
 8003870:	68a3      	ldr	r3, [r4, #8]
 8003872:	bf0c      	ite	eq
 8003874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003878:	2500      	movne	r5, #0
 800387a:	4293      	cmp	r3, r2
 800387c:	bfc4      	itt	gt
 800387e:	1a9b      	subgt	r3, r3, r2
 8003880:	18ed      	addgt	r5, r5, r3
 8003882:	2600      	movs	r6, #0
 8003884:	341a      	adds	r4, #26
 8003886:	42b5      	cmp	r5, r6
 8003888:	d11a      	bne.n	80038c0 <_printf_common+0xc8>
 800388a:	2000      	movs	r0, #0
 800388c:	e008      	b.n	80038a0 <_printf_common+0xa8>
 800388e:	2301      	movs	r3, #1
 8003890:	4652      	mov	r2, sl
 8003892:	4641      	mov	r1, r8
 8003894:	4638      	mov	r0, r7
 8003896:	47c8      	blx	r9
 8003898:	3001      	adds	r0, #1
 800389a:	d103      	bne.n	80038a4 <_printf_common+0xac>
 800389c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a4:	3501      	adds	r5, #1
 80038a6:	e7c6      	b.n	8003836 <_printf_common+0x3e>
 80038a8:	18e1      	adds	r1, r4, r3
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	2030      	movs	r0, #48	@ 0x30
 80038ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038b2:	4422      	add	r2, r4
 80038b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038bc:	3302      	adds	r3, #2
 80038be:	e7c7      	b.n	8003850 <_printf_common+0x58>
 80038c0:	2301      	movs	r3, #1
 80038c2:	4622      	mov	r2, r4
 80038c4:	4641      	mov	r1, r8
 80038c6:	4638      	mov	r0, r7
 80038c8:	47c8      	blx	r9
 80038ca:	3001      	adds	r0, #1
 80038cc:	d0e6      	beq.n	800389c <_printf_common+0xa4>
 80038ce:	3601      	adds	r6, #1
 80038d0:	e7d9      	b.n	8003886 <_printf_common+0x8e>
	...

080038d4 <_printf_i>:
 80038d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038d8:	7e0f      	ldrb	r7, [r1, #24]
 80038da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80038dc:	2f78      	cmp	r7, #120	@ 0x78
 80038de:	4691      	mov	r9, r2
 80038e0:	4680      	mov	r8, r0
 80038e2:	460c      	mov	r4, r1
 80038e4:	469a      	mov	sl, r3
 80038e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80038ea:	d807      	bhi.n	80038fc <_printf_i+0x28>
 80038ec:	2f62      	cmp	r7, #98	@ 0x62
 80038ee:	d80a      	bhi.n	8003906 <_printf_i+0x32>
 80038f0:	2f00      	cmp	r7, #0
 80038f2:	f000 80d2 	beq.w	8003a9a <_printf_i+0x1c6>
 80038f6:	2f58      	cmp	r7, #88	@ 0x58
 80038f8:	f000 80b9 	beq.w	8003a6e <_printf_i+0x19a>
 80038fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003900:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003904:	e03a      	b.n	800397c <_printf_i+0xa8>
 8003906:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800390a:	2b15      	cmp	r3, #21
 800390c:	d8f6      	bhi.n	80038fc <_printf_i+0x28>
 800390e:	a101      	add	r1, pc, #4	@ (adr r1, 8003914 <_printf_i+0x40>)
 8003910:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003914:	0800396d 	.word	0x0800396d
 8003918:	08003981 	.word	0x08003981
 800391c:	080038fd 	.word	0x080038fd
 8003920:	080038fd 	.word	0x080038fd
 8003924:	080038fd 	.word	0x080038fd
 8003928:	080038fd 	.word	0x080038fd
 800392c:	08003981 	.word	0x08003981
 8003930:	080038fd 	.word	0x080038fd
 8003934:	080038fd 	.word	0x080038fd
 8003938:	080038fd 	.word	0x080038fd
 800393c:	080038fd 	.word	0x080038fd
 8003940:	08003a81 	.word	0x08003a81
 8003944:	080039ab 	.word	0x080039ab
 8003948:	08003a3b 	.word	0x08003a3b
 800394c:	080038fd 	.word	0x080038fd
 8003950:	080038fd 	.word	0x080038fd
 8003954:	08003aa3 	.word	0x08003aa3
 8003958:	080038fd 	.word	0x080038fd
 800395c:	080039ab 	.word	0x080039ab
 8003960:	080038fd 	.word	0x080038fd
 8003964:	080038fd 	.word	0x080038fd
 8003968:	08003a43 	.word	0x08003a43
 800396c:	6833      	ldr	r3, [r6, #0]
 800396e:	1d1a      	adds	r2, r3, #4
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6032      	str	r2, [r6, #0]
 8003974:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003978:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800397c:	2301      	movs	r3, #1
 800397e:	e09d      	b.n	8003abc <_printf_i+0x1e8>
 8003980:	6833      	ldr	r3, [r6, #0]
 8003982:	6820      	ldr	r0, [r4, #0]
 8003984:	1d19      	adds	r1, r3, #4
 8003986:	6031      	str	r1, [r6, #0]
 8003988:	0606      	lsls	r6, r0, #24
 800398a:	d501      	bpl.n	8003990 <_printf_i+0xbc>
 800398c:	681d      	ldr	r5, [r3, #0]
 800398e:	e003      	b.n	8003998 <_printf_i+0xc4>
 8003990:	0645      	lsls	r5, r0, #25
 8003992:	d5fb      	bpl.n	800398c <_printf_i+0xb8>
 8003994:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003998:	2d00      	cmp	r5, #0
 800399a:	da03      	bge.n	80039a4 <_printf_i+0xd0>
 800399c:	232d      	movs	r3, #45	@ 0x2d
 800399e:	426d      	negs	r5, r5
 80039a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039a4:	4859      	ldr	r0, [pc, #356]	@ (8003b0c <_printf_i+0x238>)
 80039a6:	230a      	movs	r3, #10
 80039a8:	e011      	b.n	80039ce <_printf_i+0xfa>
 80039aa:	6821      	ldr	r1, [r4, #0]
 80039ac:	6833      	ldr	r3, [r6, #0]
 80039ae:	0608      	lsls	r0, r1, #24
 80039b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80039b4:	d402      	bmi.n	80039bc <_printf_i+0xe8>
 80039b6:	0649      	lsls	r1, r1, #25
 80039b8:	bf48      	it	mi
 80039ba:	b2ad      	uxthmi	r5, r5
 80039bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80039be:	4853      	ldr	r0, [pc, #332]	@ (8003b0c <_printf_i+0x238>)
 80039c0:	6033      	str	r3, [r6, #0]
 80039c2:	bf14      	ite	ne
 80039c4:	230a      	movne	r3, #10
 80039c6:	2308      	moveq	r3, #8
 80039c8:	2100      	movs	r1, #0
 80039ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80039ce:	6866      	ldr	r6, [r4, #4]
 80039d0:	60a6      	str	r6, [r4, #8]
 80039d2:	2e00      	cmp	r6, #0
 80039d4:	bfa2      	ittt	ge
 80039d6:	6821      	ldrge	r1, [r4, #0]
 80039d8:	f021 0104 	bicge.w	r1, r1, #4
 80039dc:	6021      	strge	r1, [r4, #0]
 80039de:	b90d      	cbnz	r5, 80039e4 <_printf_i+0x110>
 80039e0:	2e00      	cmp	r6, #0
 80039e2:	d04b      	beq.n	8003a7c <_printf_i+0x1a8>
 80039e4:	4616      	mov	r6, r2
 80039e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80039ea:	fb03 5711 	mls	r7, r3, r1, r5
 80039ee:	5dc7      	ldrb	r7, [r0, r7]
 80039f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039f4:	462f      	mov	r7, r5
 80039f6:	42bb      	cmp	r3, r7
 80039f8:	460d      	mov	r5, r1
 80039fa:	d9f4      	bls.n	80039e6 <_printf_i+0x112>
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d10b      	bne.n	8003a18 <_printf_i+0x144>
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	07df      	lsls	r7, r3, #31
 8003a04:	d508      	bpl.n	8003a18 <_printf_i+0x144>
 8003a06:	6923      	ldr	r3, [r4, #16]
 8003a08:	6861      	ldr	r1, [r4, #4]
 8003a0a:	4299      	cmp	r1, r3
 8003a0c:	bfde      	ittt	le
 8003a0e:	2330      	movle	r3, #48	@ 0x30
 8003a10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a14:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003a18:	1b92      	subs	r2, r2, r6
 8003a1a:	6122      	str	r2, [r4, #16]
 8003a1c:	f8cd a000 	str.w	sl, [sp]
 8003a20:	464b      	mov	r3, r9
 8003a22:	aa03      	add	r2, sp, #12
 8003a24:	4621      	mov	r1, r4
 8003a26:	4640      	mov	r0, r8
 8003a28:	f7ff fee6 	bl	80037f8 <_printf_common>
 8003a2c:	3001      	adds	r0, #1
 8003a2e:	d14a      	bne.n	8003ac6 <_printf_i+0x1f2>
 8003a30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a34:	b004      	add	sp, #16
 8003a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	f043 0320 	orr.w	r3, r3, #32
 8003a40:	6023      	str	r3, [r4, #0]
 8003a42:	4833      	ldr	r0, [pc, #204]	@ (8003b10 <_printf_i+0x23c>)
 8003a44:	2778      	movs	r7, #120	@ 0x78
 8003a46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	6831      	ldr	r1, [r6, #0]
 8003a4e:	061f      	lsls	r7, r3, #24
 8003a50:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a54:	d402      	bmi.n	8003a5c <_printf_i+0x188>
 8003a56:	065f      	lsls	r7, r3, #25
 8003a58:	bf48      	it	mi
 8003a5a:	b2ad      	uxthmi	r5, r5
 8003a5c:	6031      	str	r1, [r6, #0]
 8003a5e:	07d9      	lsls	r1, r3, #31
 8003a60:	bf44      	itt	mi
 8003a62:	f043 0320 	orrmi.w	r3, r3, #32
 8003a66:	6023      	strmi	r3, [r4, #0]
 8003a68:	b11d      	cbz	r5, 8003a72 <_printf_i+0x19e>
 8003a6a:	2310      	movs	r3, #16
 8003a6c:	e7ac      	b.n	80039c8 <_printf_i+0xf4>
 8003a6e:	4827      	ldr	r0, [pc, #156]	@ (8003b0c <_printf_i+0x238>)
 8003a70:	e7e9      	b.n	8003a46 <_printf_i+0x172>
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	f023 0320 	bic.w	r3, r3, #32
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	e7f6      	b.n	8003a6a <_printf_i+0x196>
 8003a7c:	4616      	mov	r6, r2
 8003a7e:	e7bd      	b.n	80039fc <_printf_i+0x128>
 8003a80:	6833      	ldr	r3, [r6, #0]
 8003a82:	6825      	ldr	r5, [r4, #0]
 8003a84:	6961      	ldr	r1, [r4, #20]
 8003a86:	1d18      	adds	r0, r3, #4
 8003a88:	6030      	str	r0, [r6, #0]
 8003a8a:	062e      	lsls	r6, r5, #24
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	d501      	bpl.n	8003a94 <_printf_i+0x1c0>
 8003a90:	6019      	str	r1, [r3, #0]
 8003a92:	e002      	b.n	8003a9a <_printf_i+0x1c6>
 8003a94:	0668      	lsls	r0, r5, #25
 8003a96:	d5fb      	bpl.n	8003a90 <_printf_i+0x1bc>
 8003a98:	8019      	strh	r1, [r3, #0]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	6123      	str	r3, [r4, #16]
 8003a9e:	4616      	mov	r6, r2
 8003aa0:	e7bc      	b.n	8003a1c <_printf_i+0x148>
 8003aa2:	6833      	ldr	r3, [r6, #0]
 8003aa4:	1d1a      	adds	r2, r3, #4
 8003aa6:	6032      	str	r2, [r6, #0]
 8003aa8:	681e      	ldr	r6, [r3, #0]
 8003aaa:	6862      	ldr	r2, [r4, #4]
 8003aac:	2100      	movs	r1, #0
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f7fc fb8e 	bl	80001d0 <memchr>
 8003ab4:	b108      	cbz	r0, 8003aba <_printf_i+0x1e6>
 8003ab6:	1b80      	subs	r0, r0, r6
 8003ab8:	6060      	str	r0, [r4, #4]
 8003aba:	6863      	ldr	r3, [r4, #4]
 8003abc:	6123      	str	r3, [r4, #16]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ac4:	e7aa      	b.n	8003a1c <_printf_i+0x148>
 8003ac6:	6923      	ldr	r3, [r4, #16]
 8003ac8:	4632      	mov	r2, r6
 8003aca:	4649      	mov	r1, r9
 8003acc:	4640      	mov	r0, r8
 8003ace:	47d0      	blx	sl
 8003ad0:	3001      	adds	r0, #1
 8003ad2:	d0ad      	beq.n	8003a30 <_printf_i+0x15c>
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	079b      	lsls	r3, r3, #30
 8003ad8:	d413      	bmi.n	8003b02 <_printf_i+0x22e>
 8003ada:	68e0      	ldr	r0, [r4, #12]
 8003adc:	9b03      	ldr	r3, [sp, #12]
 8003ade:	4298      	cmp	r0, r3
 8003ae0:	bfb8      	it	lt
 8003ae2:	4618      	movlt	r0, r3
 8003ae4:	e7a6      	b.n	8003a34 <_printf_i+0x160>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	4632      	mov	r2, r6
 8003aea:	4649      	mov	r1, r9
 8003aec:	4640      	mov	r0, r8
 8003aee:	47d0      	blx	sl
 8003af0:	3001      	adds	r0, #1
 8003af2:	d09d      	beq.n	8003a30 <_printf_i+0x15c>
 8003af4:	3501      	adds	r5, #1
 8003af6:	68e3      	ldr	r3, [r4, #12]
 8003af8:	9903      	ldr	r1, [sp, #12]
 8003afa:	1a5b      	subs	r3, r3, r1
 8003afc:	42ab      	cmp	r3, r5
 8003afe:	dcf2      	bgt.n	8003ae6 <_printf_i+0x212>
 8003b00:	e7eb      	b.n	8003ada <_printf_i+0x206>
 8003b02:	2500      	movs	r5, #0
 8003b04:	f104 0619 	add.w	r6, r4, #25
 8003b08:	e7f5      	b.n	8003af6 <_printf_i+0x222>
 8003b0a:	bf00      	nop
 8003b0c:	08003c41 	.word	0x08003c41
 8003b10:	08003c52 	.word	0x08003c52

08003b14 <memmove>:
 8003b14:	4288      	cmp	r0, r1
 8003b16:	b510      	push	{r4, lr}
 8003b18:	eb01 0402 	add.w	r4, r1, r2
 8003b1c:	d902      	bls.n	8003b24 <memmove+0x10>
 8003b1e:	4284      	cmp	r4, r0
 8003b20:	4623      	mov	r3, r4
 8003b22:	d807      	bhi.n	8003b34 <memmove+0x20>
 8003b24:	1e43      	subs	r3, r0, #1
 8003b26:	42a1      	cmp	r1, r4
 8003b28:	d008      	beq.n	8003b3c <memmove+0x28>
 8003b2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b32:	e7f8      	b.n	8003b26 <memmove+0x12>
 8003b34:	4402      	add	r2, r0
 8003b36:	4601      	mov	r1, r0
 8003b38:	428a      	cmp	r2, r1
 8003b3a:	d100      	bne.n	8003b3e <memmove+0x2a>
 8003b3c:	bd10      	pop	{r4, pc}
 8003b3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b46:	e7f7      	b.n	8003b38 <memmove+0x24>

08003b48 <_sbrk_r>:
 8003b48:	b538      	push	{r3, r4, r5, lr}
 8003b4a:	4d06      	ldr	r5, [pc, #24]	@ (8003b64 <_sbrk_r+0x1c>)
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	4604      	mov	r4, r0
 8003b50:	4608      	mov	r0, r1
 8003b52:	602b      	str	r3, [r5, #0]
 8003b54:	f7fd f922 	bl	8000d9c <_sbrk>
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	d102      	bne.n	8003b62 <_sbrk_r+0x1a>
 8003b5c:	682b      	ldr	r3, [r5, #0]
 8003b5e:	b103      	cbz	r3, 8003b62 <_sbrk_r+0x1a>
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	bd38      	pop	{r3, r4, r5, pc}
 8003b64:	2000026c 	.word	0x2000026c

08003b68 <memcpy>:
 8003b68:	440a      	add	r2, r1
 8003b6a:	4291      	cmp	r1, r2
 8003b6c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003b70:	d100      	bne.n	8003b74 <memcpy+0xc>
 8003b72:	4770      	bx	lr
 8003b74:	b510      	push	{r4, lr}
 8003b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b7e:	4291      	cmp	r1, r2
 8003b80:	d1f9      	bne.n	8003b76 <memcpy+0xe>
 8003b82:	bd10      	pop	{r4, pc}

08003b84 <_realloc_r>:
 8003b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b88:	4680      	mov	r8, r0
 8003b8a:	4615      	mov	r5, r2
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	b921      	cbnz	r1, 8003b9a <_realloc_r+0x16>
 8003b90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b94:	4611      	mov	r1, r2
 8003b96:	f7ff bc4b 	b.w	8003430 <_malloc_r>
 8003b9a:	b92a      	cbnz	r2, 8003ba8 <_realloc_r+0x24>
 8003b9c:	f7ff fbdc 	bl	8003358 <_free_r>
 8003ba0:	2400      	movs	r4, #0
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ba8:	f000 f81a 	bl	8003be0 <_malloc_usable_size_r>
 8003bac:	4285      	cmp	r5, r0
 8003bae:	4606      	mov	r6, r0
 8003bb0:	d802      	bhi.n	8003bb8 <_realloc_r+0x34>
 8003bb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003bb6:	d8f4      	bhi.n	8003ba2 <_realloc_r+0x1e>
 8003bb8:	4629      	mov	r1, r5
 8003bba:	4640      	mov	r0, r8
 8003bbc:	f7ff fc38 	bl	8003430 <_malloc_r>
 8003bc0:	4607      	mov	r7, r0
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d0ec      	beq.n	8003ba0 <_realloc_r+0x1c>
 8003bc6:	42b5      	cmp	r5, r6
 8003bc8:	462a      	mov	r2, r5
 8003bca:	4621      	mov	r1, r4
 8003bcc:	bf28      	it	cs
 8003bce:	4632      	movcs	r2, r6
 8003bd0:	f7ff ffca 	bl	8003b68 <memcpy>
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	4640      	mov	r0, r8
 8003bd8:	f7ff fbbe 	bl	8003358 <_free_r>
 8003bdc:	463c      	mov	r4, r7
 8003bde:	e7e0      	b.n	8003ba2 <_realloc_r+0x1e>

08003be0 <_malloc_usable_size_r>:
 8003be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003be4:	1f18      	subs	r0, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	bfbc      	itt	lt
 8003bea:	580b      	ldrlt	r3, [r1, r0]
 8003bec:	18c0      	addlt	r0, r0, r3
 8003bee:	4770      	bx	lr

08003bf0 <_init>:
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf2:	bf00      	nop
 8003bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf6:	bc08      	pop	{r3}
 8003bf8:	469e      	mov	lr, r3
 8003bfa:	4770      	bx	lr

08003bfc <_fini>:
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	bf00      	nop
 8003c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c02:	bc08      	pop	{r3}
 8003c04:	469e      	mov	lr, r3
 8003c06:	4770      	bx	lr
